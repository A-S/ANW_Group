Terminals which are not used

   EXTENDS
   INSTANCEOF


Grammar

    0 $accept: root $end

    1 root: /* empty */
    2     | root class

    3 class: CLASS IDENT '{' members '}'
    4      | CLASS IDENT ':' IDENT '{' members '}'

    5 members: /* empty */
    6        | members member

    7 member: global
    8       | constructor
    9       | function

   10 global: accessmodif type variables ';'

   11 constructor: accessmodif IDENT '(' args_e ')' '{' statements '}'

   12 @1: /* empty */

   13 function: accessmodif type IDENT '(' @1 args_e ')' '{' statements '}'

   14 @2: /* empty */

   15 function: accessmodif VOID IDENT '(' @2 args_e ')' '{' statements '}'

   16 arg: type IDENT

   17 args: arg
   18     | args ',' arg

   19 args_e: /* empty */
   20       | args

   21 variables: variable
   22          | variables ',' variable

   23 variable: IDENT
   24         | IDENT '=' expr

   25 accessmodif: /* empty */
   26            | PRIVATE
   27            | STATIC
   28            | PRIVATE STATIC

   29 type: noarraytype
   30     | arraytype

   31 noarraytype: IDENT
   32            | basictype

   33 basictype: BOOLEAN
   34          | INT
   35          | DOUBLE

   36 arraytype: IDENT '[' ']'
   37          | IDENT '[' ',' ']'
   38          | IDENT '[' ',' ',' ']'
   39          | basictype '[' ']'
   40          | basictype '[' ',' ']'
   41          | basictype '[' ',' ',' ']'

   42 expr: INCREMENT IDENT
   43     | DECREMENT IDENT
   44     | IDENT INCREMENT
   45     | IDENT DECREMENT
   46     | '!' expr
   47     | '-' expr
   48     | '+' expr
   49     | '(' expr ')'
   50     | qualnameorarray
   51     | qualnameorarray '=' expr
   52     | qualifiedname '(' expr_list_e ')'
   53     | qualifiedname '(' expr_list_e ')' arrayindex
   54     | NEW IDENT '(' expr_list_e ')'
   55     | NEW IDENT arrayindex
   56     | expr EQ expr
   57     | expr NE expr
   58     | expr '<' expr
   59     | expr SE expr
   60     | expr '>' expr
   61     | expr LE expr
   62     | expr '+' expr
   63     | expr '-' expr
   64     | expr '*' expr
   65     | expr '/' expr
   66     | expr '%' expr
   67     | expr AND expr
   68     | expr OR expr
   69     | expr IS type
   70     | '(' basictype ')' expr
   71     | INTEGER
   72     | REAL
   73     | TRUE
   74     | FALSE
   75     | THIS
   76     | NUL

   77 arrayindex: '[' expr ']'
   78           | '[' expr ',' expr ']'
   79           | '[' expr ',' expr ',' expr ']'

   80 qualifiedname: IDENT
   81              | expr '.' IDENT

   82 qualnameorarray: IDENT
   83                | IDENT arrayindex
   84                | expr '.' IDENT
   85                | expr '.' IDENT arrayindex

   86 expr_list: expr
   87          | expr_list ',' expr

   88 expr_list_e: /* empty */
   89            | expr_list

   90 statement: IF '(' expr ')' statement
   91          | IF '(' expr ')' statement ELSE statement
   92          | WHILE '(' expr ')' statement
   93          | FOR '(' variables_e ';' expr_e ';' expr_e ')' statement
   94          | expr ';'
   95          | type variables ';'

   96 @3: /* empty */

   97 statement: '{' @3 statements '}'
   98          | RETURN expr_e ';'

   99 statements: /* empty */
  100           | statements statement

  101 variables_e: /* empty */
  102            | type variables

  103 expr_e: /* empty */
  104       | expr


Terminals, with rules where they appear

$end (0) 0
'!' (33) 46
'%' (37) 66
'(' (40) 11 13 15 49 52 53 54 70 90 91 92 93
')' (41) 11 13 15 49 52 53 54 70 90 91 92 93
'*' (42) 64
'+' (43) 48 62
',' (44) 18 22 37 38 40 41 78 79 87
'-' (45) 47 63
'.' (46) 81 84 85
'/' (47) 65
':' (58) 4
';' (59) 10 93 94 95 98
'<' (60) 58
'=' (61) 24 51
'>' (62) 60
'[' (91) 36 37 38 39 40 41 77 78 79
']' (93) 36 37 38 39 40 41 77 78 79
'{' (123) 3 4 11 13 15 97
'}' (125) 3 4 11 13 15 97
error (256)
IDENT (258) 3 4 11 13 15 16 23 24 31 36 37 38 42 43 44 45 54 55 80
    81 82 83 84 85
INTEGER (259) 71
REAL (260) 72
CLASS (261) 3 4
BOOLEAN (262) 33
DOUBLE (263) 35
INT (264) 34
IS (265) 69
IF (266) 90 91
ELSE (267) 91
WHILE (268) 92
FOR (269) 93
FALSE (270) 74
TRUE (271) 73
EXTENDS (272)
INSTANCEOF (273)
NEW (274) 54 55
THIS (275) 75
NUL (276) 76
PRIVATE (277) 26 28
STATIC (278) 27 28
VOID (279) 15
RETURN (280) 98
IF_PREC (281)
OR (282) 68
AND (283) 67
NE (284) 57
EQ (285) 56
SE (286) 59
LE (287) 61
UNARY_OP (288)
DECREMENT (289) 43 45
INCREMENT (290) 42 44
change_type (291)


Nonterminals, with rules where they appear

$accept (56)
    on left: 0
root (57)
    on left: 1 2, on right: 0 2
class (58)
    on left: 3 4, on right: 2
members (59)
    on left: 5 6, on right: 3 4 6
member (60)
    on left: 7 8 9, on right: 6
global (61)
    on left: 10, on right: 7
constructor (62)
    on left: 11, on right: 8
function (63)
    on left: 13 15, on right: 9
@1 (64)
    on left: 12, on right: 13
@2 (65)
    on left: 14, on right: 15
arg (66)
    on left: 16, on right: 17 18
args (67)
    on left: 17 18, on right: 18 20
args_e (68)
    on left: 19 20, on right: 11 13 15
variables (69)
    on left: 21 22, on right: 10 22 95 102
variable (70)
    on left: 23 24, on right: 21 22
accessmodif (71)
    on left: 25 26 27 28, on right: 10 11 13 15
type (72)
    on left: 29 30, on right: 10 13 16 69 95 102
noarraytype (73)
    on left: 31 32, on right: 29
basictype (74)
    on left: 33 34 35, on right: 32 39 40 41 70
arraytype (75)
    on left: 36 37 38 39 40 41, on right: 30
expr (76)
    on left: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
    60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76,
    on right: 24 46 47 48 49 51 56 57 58 59 60 61 62 63 64 65 66 67
    68 69 70 77 78 79 81 84 85 86 87 90 91 92 94 104
arrayindex (77)
    on left: 77 78 79, on right: 53 55 83 85
qualifiedname (78)
    on left: 80 81, on right: 52 53
qualnameorarray (79)
    on left: 82 83 84 85, on right: 50 51
expr_list (80)
    on left: 86 87, on right: 87 89
expr_list_e (81)
    on left: 88 89, on right: 52 53 54
statement (82)
    on left: 90 91 92 93 94 95 97 98, on right: 90 91 92 93 100
@3 (83)
    on left: 96, on right: 97
statements (84)
    on left: 99 100, on right: 11 13 15 97 100
variables_e (85)
    on left: 101 102, on right: 93
expr_e (86)
    on left: 103 104, on right: 93 98


state 0

    0 $accept: . root $end

    $default  reduce using rule 1 (root)

    root  go to state 1


state 1

    0 $accept: root . $end
    2 root: root . class

    $end   shift, and go to state 2
    CLASS  shift, and go to state 3

    class  go to state 4


state 2

    0 $accept: root $end .

    $default  accept


state 3

    3 class: CLASS . IDENT '{' members '}'
    4      | CLASS . IDENT ':' IDENT '{' members '}'

    IDENT  shift, and go to state 5


state 4

    2 root: root class .

    $default  reduce using rule 2 (root)


state 5

    3 class: CLASS IDENT . '{' members '}'
    4      | CLASS IDENT . ':' IDENT '{' members '}'

    '{'  shift, and go to state 6
    ':'  shift, and go to state 7


state 6

    3 class: CLASS IDENT '{' . members '}'

    $default  reduce using rule 5 (members)

    members  go to state 8


state 7

    4 class: CLASS IDENT ':' . IDENT '{' members '}'

    IDENT  shift, and go to state 9


state 8

    3 class: CLASS IDENT '{' members . '}'
    6 members: members . member

    PRIVATE  shift, and go to state 10
    STATIC   shift, and go to state 11
    '}'      shift, and go to state 12

    $default  reduce using rule 25 (accessmodif)

    member       go to state 13
    global       go to state 14
    constructor  go to state 15
    function     go to state 16
    accessmodif  go to state 17


state 9

    4 class: CLASS IDENT ':' IDENT . '{' members '}'

    '{'  shift, and go to state 18


state 10

   26 accessmodif: PRIVATE .
   28            | PRIVATE . STATIC

    STATIC  shift, and go to state 19

    $default  reduce using rule 26 (accessmodif)


state 11

   27 accessmodif: STATIC .

    $default  reduce using rule 27 (accessmodif)


state 12

    3 class: CLASS IDENT '{' members '}' .

    $default  reduce using rule 3 (class)


state 13

    6 members: members member .

    $default  reduce using rule 6 (members)


state 14

    7 member: global .

    $default  reduce using rule 7 (member)


state 15

    8 member: constructor .

    $default  reduce using rule 8 (member)


state 16

    9 member: function .

    $default  reduce using rule 9 (member)


state 17

   10 global: accessmodif . type variables ';'
   11 constructor: accessmodif . IDENT '(' args_e ')' '{' statements '}'
   13 function: accessmodif . type IDENT '(' @1 args_e ')' '{' statements '}'
   15         | accessmodif . VOID IDENT '(' @2 args_e ')' '{' statements '}'

    IDENT    shift, and go to state 20
    BOOLEAN  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    INT      shift, and go to state 23
    VOID     shift, and go to state 24

    type         go to state 25
    noarraytype  go to state 26
    basictype    go to state 27
    arraytype    go to state 28


state 18

    4 class: CLASS IDENT ':' IDENT '{' . members '}'

    $default  reduce using rule 5 (members)

    members  go to state 29


state 19

   28 accessmodif: PRIVATE STATIC .

    $default  reduce using rule 28 (accessmodif)


state 20

   11 constructor: accessmodif IDENT . '(' args_e ')' '{' statements '}'
   31 noarraytype: IDENT .
   36 arraytype: IDENT . '[' ']'
   37          | IDENT . '[' ',' ']'
   38          | IDENT . '[' ',' ',' ']'

    '('  shift, and go to state 30
    '['  shift, and go to state 31

    $default  reduce using rule 31 (noarraytype)


state 21

   33 basictype: BOOLEAN .

    $default  reduce using rule 33 (basictype)


state 22

   35 basictype: DOUBLE .

    $default  reduce using rule 35 (basictype)


state 23

   34 basictype: INT .

    $default  reduce using rule 34 (basictype)


state 24

   15 function: accessmodif VOID . IDENT '(' @2 args_e ')' '{' statements '}'

    IDENT  shift, and go to state 32


state 25

   10 global: accessmodif type . variables ';'
   13 function: accessmodif type . IDENT '(' @1 args_e ')' '{' statements '}'

    IDENT  shift, and go to state 33

    variables  go to state 34
    variable   go to state 35


state 26

   29 type: noarraytype .

    $default  reduce using rule 29 (type)


state 27

   32 noarraytype: basictype .
   39 arraytype: basictype . '[' ']'
   40          | basictype . '[' ',' ']'
   41          | basictype . '[' ',' ',' ']'

    '['  shift, and go to state 36

    $default  reduce using rule 32 (noarraytype)


state 28

   30 type: arraytype .

    $default  reduce using rule 30 (type)


state 29

    4 class: CLASS IDENT ':' IDENT '{' members . '}'
    6 members: members . member

    PRIVATE  shift, and go to state 10
    STATIC   shift, and go to state 11
    '}'      shift, and go to state 37

    $default  reduce using rule 25 (accessmodif)

    member       go to state 13
    global       go to state 14
    constructor  go to state 15
    function     go to state 16
    accessmodif  go to state 17


state 30

   11 constructor: accessmodif IDENT '(' . args_e ')' '{' statements '}'

    IDENT    shift, and go to state 38
    BOOLEAN  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    INT      shift, and go to state 23

    $default  reduce using rule 19 (args_e)

    arg          go to state 39
    args         go to state 40
    args_e       go to state 41
    type         go to state 42
    noarraytype  go to state 26
    basictype    go to state 27
    arraytype    go to state 28


state 31

   36 arraytype: IDENT '[' . ']'
   37          | IDENT '[' . ',' ']'
   38          | IDENT '[' . ',' ',' ']'

    ','  shift, and go to state 43
    ']'  shift, and go to state 44


state 32

   15 function: accessmodif VOID IDENT . '(' @2 args_e ')' '{' statements '}'

    '('  shift, and go to state 45


state 33

   13 function: accessmodif type IDENT . '(' @1 args_e ')' '{' statements '}'
   23 variable: IDENT .
   24         | IDENT . '=' expr

    '='  shift, and go to state 46
    '('  shift, and go to state 47

    $default  reduce using rule 23 (variable)


state 34

   10 global: accessmodif type variables . ';'
   22 variables: variables . ',' variable

    ';'  shift, and go to state 48
    ','  shift, and go to state 49


state 35

   21 variables: variable .

    $default  reduce using rule 21 (variables)


state 36

   39 arraytype: basictype '[' . ']'
   40          | basictype '[' . ',' ']'
   41          | basictype '[' . ',' ',' ']'

    ','  shift, and go to state 50
    ']'  shift, and go to state 51


state 37

    4 class: CLASS IDENT ':' IDENT '{' members '}' .

    $default  reduce using rule 4 (class)


state 38

   31 noarraytype: IDENT .
   36 arraytype: IDENT . '[' ']'
   37          | IDENT . '[' ',' ']'
   38          | IDENT . '[' ',' ',' ']'

    '['  shift, and go to state 31

    $default  reduce using rule 31 (noarraytype)


state 39

   17 args: arg .

    $default  reduce using rule 17 (args)


state 40

   18 args: args . ',' arg
   20 args_e: args .

    ','  shift, and go to state 52

    $default  reduce using rule 20 (args_e)


state 41

   11 constructor: accessmodif IDENT '(' args_e . ')' '{' statements '}'

    ')'  shift, and go to state 53


state 42

   16 arg: type . IDENT

    IDENT  shift, and go to state 54


state 43

   37 arraytype: IDENT '[' ',' . ']'
   38          | IDENT '[' ',' . ',' ']'

    ','  shift, and go to state 55
    ']'  shift, and go to state 56


state 44

   36 arraytype: IDENT '[' ']' .

    $default  reduce using rule 36 (arraytype)


state 45

   15 function: accessmodif VOID IDENT '(' . @2 args_e ')' '{' statements '}'

    $default  reduce using rule 14 (@2)

    @2  go to state 57


state 46

   24 variable: IDENT '=' . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 72
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 47

   13 function: accessmodif type IDENT '(' . @1 args_e ')' '{' statements '}'

    $default  reduce using rule 12 (@1)

    @1  go to state 75


state 48

   10 global: accessmodif type variables ';' .

    $default  reduce using rule 10 (global)


state 49

   22 variables: variables ',' . variable

    IDENT  shift, and go to state 76

    variable  go to state 77


state 50

   40 arraytype: basictype '[' ',' . ']'
   41          | basictype '[' ',' . ',' ']'

    ','  shift, and go to state 78
    ']'  shift, and go to state 79


state 51

   39 arraytype: basictype '[' ']' .

    $default  reduce using rule 39 (arraytype)


state 52

   18 args: args ',' . arg

    IDENT    shift, and go to state 38
    BOOLEAN  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    INT      shift, and go to state 23

    arg          go to state 80
    type         go to state 42
    noarraytype  go to state 26
    basictype    go to state 27
    arraytype    go to state 28


state 53

   11 constructor: accessmodif IDENT '(' args_e ')' . '{' statements '}'

    '{'  shift, and go to state 81


state 54

   16 arg: type IDENT .

    $default  reduce using rule 16 (arg)


state 55

   38 arraytype: IDENT '[' ',' ',' . ']'

    ']'  shift, and go to state 82


state 56

   37 arraytype: IDENT '[' ',' ']' .

    $default  reduce using rule 37 (arraytype)


state 57

   15 function: accessmodif VOID IDENT '(' @2 . args_e ')' '{' statements '}'

    IDENT    shift, and go to state 38
    BOOLEAN  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    INT      shift, and go to state 23

    $default  reduce using rule 19 (args_e)

    arg          go to state 39
    args         go to state 40
    args_e       go to state 83
    type         go to state 42
    noarraytype  go to state 26
    basictype    go to state 27
    arraytype    go to state 28


state 58

   44 expr: IDENT . INCREMENT
   45     | IDENT . DECREMENT
   80 qualifiedname: IDENT .
   82 qualnameorarray: IDENT .
   83                | IDENT . arrayindex

    DECREMENT  shift, and go to state 84
    INCREMENT  shift, and go to state 85
    '['        shift, and go to state 86

    '('       reduce using rule 80 (qualifiedname)
    $default  reduce using rule 82 (qualnameorarray)

    arrayindex  go to state 87


state 59

   71 expr: INTEGER .

    $default  reduce using rule 71 (expr)


state 60

   72 expr: REAL .

    $default  reduce using rule 72 (expr)


state 61

   74 expr: FALSE .

    $default  reduce using rule 74 (expr)


state 62

   73 expr: TRUE .

    $default  reduce using rule 73 (expr)


state 63

   54 expr: NEW . IDENT '(' expr_list_e ')'
   55     | NEW . IDENT arrayindex

    IDENT  shift, and go to state 88


state 64

   75 expr: THIS .

    $default  reduce using rule 75 (expr)


state 65

   76 expr: NUL .

    $default  reduce using rule 76 (expr)


state 66

   48 expr: '+' . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 89
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 67

   47 expr: '-' . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 90
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 68

   46 expr: '!' . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 91
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 69

   43 expr: DECREMENT . IDENT

    IDENT  shift, and go to state 92


state 70

   42 expr: INCREMENT . IDENT

    IDENT  shift, and go to state 93


state 71

   49 expr: '(' . expr ')'
   70     | '(' . basictype ')' expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    basictype        go to state 94
    expr             go to state 95
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 72

   24 variable: IDENT '=' expr .
   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    IS   shift, and go to state 96
    OR   shift, and go to state 97
    AND  shift, and go to state 98
    NE   shift, and go to state 99
    EQ   shift, and go to state 100
    '>'  shift, and go to state 101
    '<'  shift, and go to state 102
    SE   shift, and go to state 103
    LE   shift, and go to state 104
    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110

    $default  reduce using rule 24 (variable)


state 73

   52 expr: qualifiedname . '(' expr_list_e ')'
   53     | qualifiedname . '(' expr_list_e ')' arrayindex

    '('  shift, and go to state 111


state 74

   50 expr: qualnameorarray .
   51     | qualnameorarray . '=' expr

    '='  shift, and go to state 112

    $default  reduce using rule 50 (expr)


state 75

   13 function: accessmodif type IDENT '(' @1 . args_e ')' '{' statements '}'

    IDENT    shift, and go to state 38
    BOOLEAN  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    INT      shift, and go to state 23

    $default  reduce using rule 19 (args_e)

    arg          go to state 39
    args         go to state 40
    args_e       go to state 113
    type         go to state 42
    noarraytype  go to state 26
    basictype    go to state 27
    arraytype    go to state 28


state 76

   23 variable: IDENT .
   24         | IDENT . '=' expr

    '='  shift, and go to state 46

    $default  reduce using rule 23 (variable)


state 77

   22 variables: variables ',' variable .

    $default  reduce using rule 22 (variables)


state 78

   41 arraytype: basictype '[' ',' ',' . ']'

    ']'  shift, and go to state 114


state 79

   40 arraytype: basictype '[' ',' ']' .

    $default  reduce using rule 40 (arraytype)


state 80

   18 args: args ',' arg .

    $default  reduce using rule 18 (args)


state 81

   11 constructor: accessmodif IDENT '(' args_e ')' '{' . statements '}'

    $default  reduce using rule 99 (statements)

    statements  go to state 115


state 82

   38 arraytype: IDENT '[' ',' ',' ']' .

    $default  reduce using rule 38 (arraytype)


state 83

   15 function: accessmodif VOID IDENT '(' @2 args_e . ')' '{' statements '}'

    ')'  shift, and go to state 116


state 84

   45 expr: IDENT DECREMENT .

    $default  reduce using rule 45 (expr)


state 85

   44 expr: IDENT INCREMENT .

    $default  reduce using rule 44 (expr)


state 86

   77 arrayindex: '[' . expr ']'
   78           | '[' . expr ',' expr ']'
   79           | '[' . expr ',' expr ',' expr ']'

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 117
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 87

   83 qualnameorarray: IDENT arrayindex .

    $default  reduce using rule 83 (qualnameorarray)


state 88

   54 expr: NEW IDENT . '(' expr_list_e ')'
   55     | NEW IDENT . arrayindex

    '('  shift, and go to state 118
    '['  shift, and go to state 86

    arrayindex  go to state 119


state 89

   48 expr: '+' expr .
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    '.'  shift, and go to state 110

    $default  reduce using rule 48 (expr)


state 90

   47 expr: '-' expr .
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    '.'  shift, and go to state 110

    $default  reduce using rule 47 (expr)


state 91

   46 expr: '!' expr .
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    '.'  shift, and go to state 110

    $default  reduce using rule 46 (expr)


state 92

   43 expr: DECREMENT IDENT .

    $default  reduce using rule 43 (expr)


state 93

   42 expr: INCREMENT IDENT .

    $default  reduce using rule 42 (expr)


state 94

   70 expr: '(' basictype . ')' expr

    ')'  shift, and go to state 120


state 95

   49 expr: '(' expr . ')'
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    IS   shift, and go to state 96
    OR   shift, and go to state 97
    AND  shift, and go to state 98
    NE   shift, and go to state 99
    EQ   shift, and go to state 100
    '>'  shift, and go to state 101
    '<'  shift, and go to state 102
    SE   shift, and go to state 103
    LE   shift, and go to state 104
    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110
    ')'  shift, and go to state 121


state 96

   69 expr: expr IS . type

    IDENT    shift, and go to state 38
    BOOLEAN  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    INT      shift, and go to state 23

    type         go to state 122
    noarraytype  go to state 26
    basictype    go to state 27
    arraytype    go to state 28


state 97

   68 expr: expr OR . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 123
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 98

   67 expr: expr AND . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 124
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 99

   57 expr: expr NE . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 125
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 100

   56 expr: expr EQ . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 126
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 101

   60 expr: expr '>' . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 127
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 102

   58 expr: expr '<' . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 128
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 103

   59 expr: expr SE . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 129
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 104

   61 expr: expr LE . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 130
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 105

   62 expr: expr '+' . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 131
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 106

   63 expr: expr '-' . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 132
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 107

   64 expr: expr '*' . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 133
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 108

   65 expr: expr '/' . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 134
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 109

   66 expr: expr '%' . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 135
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 110

   81 qualifiedname: expr '.' . IDENT
   84 qualnameorarray: expr '.' . IDENT
   85                | expr '.' . IDENT arrayindex

    IDENT  shift, and go to state 136


state 111

   52 expr: qualifiedname '(' . expr_list_e ')'
   53     | qualifiedname '(' . expr_list_e ')' arrayindex

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    $default  reduce using rule 88 (expr_list_e)

    expr             go to state 137
    qualifiedname    go to state 73
    qualnameorarray  go to state 74
    expr_list        go to state 138
    expr_list_e      go to state 139


state 112

   51 expr: qualnameorarray '=' . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 140
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 113

   13 function: accessmodif type IDENT '(' @1 args_e . ')' '{' statements '}'

    ')'  shift, and go to state 141


state 114

   41 arraytype: basictype '[' ',' ',' ']' .

    $default  reduce using rule 41 (arraytype)


state 115

   11 constructor: accessmodif IDENT '(' args_e ')' '{' statements . '}'
  100 statements: statements . statement

    IDENT      shift, and go to state 142
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    IF         shift, and go to state 143
    WHILE      shift, and go to state 144
    FOR        shift, and go to state 145
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    RETURN     shift, and go to state 146
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71
    '{'        shift, and go to state 147
    '}'        shift, and go to state 148

    type             go to state 149
    noarraytype      go to state 26
    basictype        go to state 27
    arraytype        go to state 28
    expr             go to state 150
    qualifiedname    go to state 73
    qualnameorarray  go to state 74
    statement        go to state 151


state 116

   15 function: accessmodif VOID IDENT '(' @2 args_e ')' . '{' statements '}'

    '{'  shift, and go to state 152


state 117

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   77 arrayindex: '[' expr . ']'
   78           | '[' expr . ',' expr ']'
   79           | '[' expr . ',' expr ',' expr ']'
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    IS   shift, and go to state 96
    OR   shift, and go to state 97
    AND  shift, and go to state 98
    NE   shift, and go to state 99
    EQ   shift, and go to state 100
    '>'  shift, and go to state 101
    '<'  shift, and go to state 102
    SE   shift, and go to state 103
    LE   shift, and go to state 104
    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110
    ','  shift, and go to state 153
    ']'  shift, and go to state 154


state 118

   54 expr: NEW IDENT '(' . expr_list_e ')'

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    $default  reduce using rule 88 (expr_list_e)

    expr             go to state 137
    qualifiedname    go to state 73
    qualnameorarray  go to state 74
    expr_list        go to state 138
    expr_list_e      go to state 155


state 119

   55 expr: NEW IDENT arrayindex .

    $default  reduce using rule 55 (expr)


state 120

   70 expr: '(' basictype ')' . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 156
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 121

   49 expr: '(' expr ')' .

    $default  reduce using rule 49 (expr)


state 122

   69 expr: expr IS type .

    $default  reduce using rule 69 (expr)


state 123

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   68     | expr OR expr .
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    IS   shift, and go to state 96
    AND  shift, and go to state 98
    NE   shift, and go to state 99
    EQ   shift, and go to state 100
    '>'  shift, and go to state 101
    '<'  shift, and go to state 102
    SE   shift, and go to state 103
    LE   shift, and go to state 104
    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110

    $default  reduce using rule 68 (expr)


state 124

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   67     | expr AND expr .
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    IS   shift, and go to state 96
    NE   shift, and go to state 99
    EQ   shift, and go to state 100
    '>'  shift, and go to state 101
    '<'  shift, and go to state 102
    SE   shift, and go to state 103
    LE   shift, and go to state 104
    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110

    $default  reduce using rule 67 (expr)


state 125

   56 expr: expr . EQ expr
   57     | expr . NE expr
   57     | expr NE expr .
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    '>'  shift, and go to state 101
    '<'  shift, and go to state 102
    SE   shift, and go to state 103
    LE   shift, and go to state 104
    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110

    $default  reduce using rule 57 (expr)


state 126

   56 expr: expr . EQ expr
   56     | expr EQ expr .
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    '>'  shift, and go to state 101
    '<'  shift, and go to state 102
    SE   shift, and go to state 103
    LE   shift, and go to state 104
    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110

    $default  reduce using rule 56 (expr)


state 127

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   60     | expr '>' expr .
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110

    $default  reduce using rule 60 (expr)


state 128

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   58     | expr '<' expr .
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110

    $default  reduce using rule 58 (expr)


state 129

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   59     | expr SE expr .
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110

    $default  reduce using rule 59 (expr)


state 130

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   61     | expr LE expr .
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110

    $default  reduce using rule 61 (expr)


state 131

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   62     | expr '+' expr .
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110

    $default  reduce using rule 62 (expr)


state 132

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   63     | expr '-' expr .
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110

    $default  reduce using rule 63 (expr)


state 133

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   64     | expr '*' expr .
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    '.'  shift, and go to state 110

    $default  reduce using rule 64 (expr)


state 134

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   65     | expr '/' expr .
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    '.'  shift, and go to state 110

    $default  reduce using rule 65 (expr)


state 135

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   66     | expr '%' expr .
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    '.'  shift, and go to state 110

    $default  reduce using rule 66 (expr)


state 136

   81 qualifiedname: expr '.' IDENT .
   84 qualnameorarray: expr '.' IDENT .
   85                | expr '.' IDENT . arrayindex

    '['  shift, and go to state 86

    '('       reduce using rule 81 (qualifiedname)
    $default  reduce using rule 84 (qualnameorarray)

    arrayindex  go to state 157


state 137

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex
   86 expr_list: expr .

    IS   shift, and go to state 96
    OR   shift, and go to state 97
    AND  shift, and go to state 98
    NE   shift, and go to state 99
    EQ   shift, and go to state 100
    '>'  shift, and go to state 101
    '<'  shift, and go to state 102
    SE   shift, and go to state 103
    LE   shift, and go to state 104
    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110

    $default  reduce using rule 86 (expr_list)


state 138

   87 expr_list: expr_list . ',' expr
   89 expr_list_e: expr_list .

    ','  shift, and go to state 158

    $default  reduce using rule 89 (expr_list_e)


state 139

   52 expr: qualifiedname '(' expr_list_e . ')'
   53     | qualifiedname '(' expr_list_e . ')' arrayindex

    ')'  shift, and go to state 159


state 140

   51 expr: qualnameorarray '=' expr .
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    IS   shift, and go to state 96
    OR   shift, and go to state 97
    AND  shift, and go to state 98
    NE   shift, and go to state 99
    EQ   shift, and go to state 100
    '>'  shift, and go to state 101
    '<'  shift, and go to state 102
    SE   shift, and go to state 103
    LE   shift, and go to state 104
    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110

    $default  reduce using rule 51 (expr)


state 141

   13 function: accessmodif type IDENT '(' @1 args_e ')' . '{' statements '}'

    '{'  shift, and go to state 160


state 142

   31 noarraytype: IDENT .
   36 arraytype: IDENT . '[' ']'
   37          | IDENT . '[' ',' ']'
   38          | IDENT . '[' ',' ',' ']'
   44 expr: IDENT . INCREMENT
   45     | IDENT . DECREMENT
   80 qualifiedname: IDENT .
   82 qualnameorarray: IDENT .
   83                | IDENT . arrayindex

    DECREMENT  shift, and go to state 84
    INCREMENT  shift, and go to state 85
    '['        shift, and go to state 161

    IDENT     reduce using rule 31 (noarraytype)
    '('       reduce using rule 80 (qualifiedname)
    $default  reduce using rule 82 (qualnameorarray)

    arrayindex  go to state 87


state 143

   90 statement: IF . '(' expr ')' statement
   91          | IF . '(' expr ')' statement ELSE statement

    '('  shift, and go to state 162


state 144

   92 statement: WHILE . '(' expr ')' statement

    '('  shift, and go to state 163


state 145

   93 statement: FOR . '(' variables_e ';' expr_e ';' expr_e ')' statement

    '('  shift, and go to state 164


state 146

   98 statement: RETURN . expr_e ';'

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    $default  reduce using rule 103 (expr_e)

    expr             go to state 165
    qualifiedname    go to state 73
    qualnameorarray  go to state 74
    expr_e           go to state 166


state 147

   97 statement: '{' . @3 statements '}'

    $default  reduce using rule 96 (@3)

    @3  go to state 167


state 148

   11 constructor: accessmodif IDENT '(' args_e ')' '{' statements '}' .

    $default  reduce using rule 11 (constructor)


state 149

   95 statement: type . variables ';'

    IDENT  shift, and go to state 76

    variables  go to state 168
    variable   go to state 35


state 150

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex
   94 statement: expr . ';'

    IS   shift, and go to state 96
    OR   shift, and go to state 97
    AND  shift, and go to state 98
    NE   shift, and go to state 99
    EQ   shift, and go to state 100
    '>'  shift, and go to state 101
    '<'  shift, and go to state 102
    SE   shift, and go to state 103
    LE   shift, and go to state 104
    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110
    ';'  shift, and go to state 169


state 151

  100 statements: statements statement .

    $default  reduce using rule 100 (statements)


state 152

   15 function: accessmodif VOID IDENT '(' @2 args_e ')' '{' . statements '}'

    $default  reduce using rule 99 (statements)

    statements  go to state 170


state 153

   78 arrayindex: '[' expr ',' . expr ']'
   79           | '[' expr ',' . expr ',' expr ']'

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 171
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 154

   77 arrayindex: '[' expr ']' .

    $default  reduce using rule 77 (arrayindex)


state 155

   54 expr: NEW IDENT '(' expr_list_e . ')'

    ')'  shift, and go to state 172


state 156

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   70     | '(' basictype ')' expr .
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    '.'  shift, and go to state 110

    $default  reduce using rule 70 (expr)


state 157

   85 qualnameorarray: expr '.' IDENT arrayindex .

    $default  reduce using rule 85 (qualnameorarray)


state 158

   87 expr_list: expr_list ',' . expr

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 173
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 159

   52 expr: qualifiedname '(' expr_list_e ')' .
   53     | qualifiedname '(' expr_list_e ')' . arrayindex

    '['  shift, and go to state 86

    $default  reduce using rule 52 (expr)

    arrayindex  go to state 174


state 160

   13 function: accessmodif type IDENT '(' @1 args_e ')' '{' . statements '}'

    $default  reduce using rule 99 (statements)

    statements  go to state 175


state 161

   36 arraytype: IDENT '[' . ']'
   37          | IDENT '[' . ',' ']'
   38          | IDENT '[' . ',' ',' ']'
   77 arrayindex: '[' . expr ']'
   78           | '[' . expr ',' expr ']'
   79           | '[' . expr ',' expr ',' expr ']'

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71
    ','        shift, and go to state 43
    ']'        shift, and go to state 44

    expr             go to state 117
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 162

   90 statement: IF '(' . expr ')' statement
   91          | IF '(' . expr ')' statement ELSE statement

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 176
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 163

   92 statement: WHILE '(' . expr ')' statement

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 177
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 164

   93 statement: FOR '(' . variables_e ';' expr_e ';' expr_e ')' statement

    IDENT    shift, and go to state 38
    BOOLEAN  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    INT      shift, and go to state 23

    $default  reduce using rule 101 (variables_e)

    type         go to state 178
    noarraytype  go to state 26
    basictype    go to state 27
    arraytype    go to state 28
    variables_e  go to state 179


state 165

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex
  104 expr_e: expr .

    IS   shift, and go to state 96
    OR   shift, and go to state 97
    AND  shift, and go to state 98
    NE   shift, and go to state 99
    EQ   shift, and go to state 100
    '>'  shift, and go to state 101
    '<'  shift, and go to state 102
    SE   shift, and go to state 103
    LE   shift, and go to state 104
    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110

    $default  reduce using rule 104 (expr_e)


state 166

   98 statement: RETURN expr_e . ';'

    ';'  shift, and go to state 180


state 167

   97 statement: '{' @3 . statements '}'

    $default  reduce using rule 99 (statements)

    statements  go to state 181


state 168

   22 variables: variables . ',' variable
   95 statement: type variables . ';'

    ';'  shift, and go to state 182
    ','  shift, and go to state 49


state 169

   94 statement: expr ';' .

    $default  reduce using rule 94 (statement)


state 170

   15 function: accessmodif VOID IDENT '(' @2 args_e ')' '{' statements . '}'
  100 statements: statements . statement

    IDENT      shift, and go to state 142
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    IF         shift, and go to state 143
    WHILE      shift, and go to state 144
    FOR        shift, and go to state 145
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    RETURN     shift, and go to state 146
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71
    '{'        shift, and go to state 147
    '}'        shift, and go to state 183

    type             go to state 149
    noarraytype      go to state 26
    basictype        go to state 27
    arraytype        go to state 28
    expr             go to state 150
    qualifiedname    go to state 73
    qualnameorarray  go to state 74
    statement        go to state 151


state 171

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   78 arrayindex: '[' expr ',' expr . ']'
   79           | '[' expr ',' expr . ',' expr ']'
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    IS   shift, and go to state 96
    OR   shift, and go to state 97
    AND  shift, and go to state 98
    NE   shift, and go to state 99
    EQ   shift, and go to state 100
    '>'  shift, and go to state 101
    '<'  shift, and go to state 102
    SE   shift, and go to state 103
    LE   shift, and go to state 104
    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110
    ','  shift, and go to state 184
    ']'  shift, and go to state 185


state 172

   54 expr: NEW IDENT '(' expr_list_e ')' .

    $default  reduce using rule 54 (expr)


state 173

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex
   87 expr_list: expr_list ',' expr .

    IS   shift, and go to state 96
    OR   shift, and go to state 97
    AND  shift, and go to state 98
    NE   shift, and go to state 99
    EQ   shift, and go to state 100
    '>'  shift, and go to state 101
    '<'  shift, and go to state 102
    SE   shift, and go to state 103
    LE   shift, and go to state 104
    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110

    $default  reduce using rule 87 (expr_list)


state 174

   53 expr: qualifiedname '(' expr_list_e ')' arrayindex .

    $default  reduce using rule 53 (expr)


state 175

   13 function: accessmodif type IDENT '(' @1 args_e ')' '{' statements . '}'
  100 statements: statements . statement

    IDENT      shift, and go to state 142
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    IF         shift, and go to state 143
    WHILE      shift, and go to state 144
    FOR        shift, and go to state 145
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    RETURN     shift, and go to state 146
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71
    '{'        shift, and go to state 147
    '}'        shift, and go to state 186

    type             go to state 149
    noarraytype      go to state 26
    basictype        go to state 27
    arraytype        go to state 28
    expr             go to state 150
    qualifiedname    go to state 73
    qualnameorarray  go to state 74
    statement        go to state 151


state 176

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex
   90 statement: IF '(' expr . ')' statement
   91          | IF '(' expr . ')' statement ELSE statement

    IS   shift, and go to state 96
    OR   shift, and go to state 97
    AND  shift, and go to state 98
    NE   shift, and go to state 99
    EQ   shift, and go to state 100
    '>'  shift, and go to state 101
    '<'  shift, and go to state 102
    SE   shift, and go to state 103
    LE   shift, and go to state 104
    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110
    ')'  shift, and go to state 187


state 177

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex
   92 statement: WHILE '(' expr . ')' statement

    IS   shift, and go to state 96
    OR   shift, and go to state 97
    AND  shift, and go to state 98
    NE   shift, and go to state 99
    EQ   shift, and go to state 100
    '>'  shift, and go to state 101
    '<'  shift, and go to state 102
    SE   shift, and go to state 103
    LE   shift, and go to state 104
    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110
    ')'  shift, and go to state 188


state 178

  102 variables_e: type . variables

    IDENT  shift, and go to state 76

    variables  go to state 189
    variable   go to state 35


state 179

   93 statement: FOR '(' variables_e . ';' expr_e ';' expr_e ')' statement

    ';'  shift, and go to state 190


state 180

   98 statement: RETURN expr_e ';' .

    $default  reduce using rule 98 (statement)


state 181

   97 statement: '{' @3 statements . '}'
  100 statements: statements . statement

    IDENT      shift, and go to state 142
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    IF         shift, and go to state 143
    WHILE      shift, and go to state 144
    FOR        shift, and go to state 145
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    RETURN     shift, and go to state 146
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71
    '{'        shift, and go to state 147
    '}'        shift, and go to state 191

    type             go to state 149
    noarraytype      go to state 26
    basictype        go to state 27
    arraytype        go to state 28
    expr             go to state 150
    qualifiedname    go to state 73
    qualnameorarray  go to state 74
    statement        go to state 151


state 182

   95 statement: type variables ';' .

    $default  reduce using rule 95 (statement)


state 183

   15 function: accessmodif VOID IDENT '(' @2 args_e ')' '{' statements '}' .

    $default  reduce using rule 15 (function)


state 184

   79 arrayindex: '[' expr ',' expr ',' . expr ']'

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    expr             go to state 192
    qualifiedname    go to state 73
    qualnameorarray  go to state 74


state 185

   78 arrayindex: '[' expr ',' expr ']' .

    $default  reduce using rule 78 (arrayindex)


state 186

   13 function: accessmodif type IDENT '(' @1 args_e ')' '{' statements '}' .

    $default  reduce using rule 13 (function)


state 187

   90 statement: IF '(' expr ')' . statement
   91          | IF '(' expr ')' . statement ELSE statement

    IDENT      shift, and go to state 142
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    IF         shift, and go to state 143
    WHILE      shift, and go to state 144
    FOR        shift, and go to state 145
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    RETURN     shift, and go to state 146
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71
    '{'        shift, and go to state 147

    type             go to state 149
    noarraytype      go to state 26
    basictype        go to state 27
    arraytype        go to state 28
    expr             go to state 150
    qualifiedname    go to state 73
    qualnameorarray  go to state 74
    statement        go to state 193


state 188

   92 statement: WHILE '(' expr ')' . statement

    IDENT      shift, and go to state 142
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    IF         shift, and go to state 143
    WHILE      shift, and go to state 144
    FOR        shift, and go to state 145
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    RETURN     shift, and go to state 146
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71
    '{'        shift, and go to state 147

    type             go to state 149
    noarraytype      go to state 26
    basictype        go to state 27
    arraytype        go to state 28
    expr             go to state 150
    qualifiedname    go to state 73
    qualnameorarray  go to state 74
    statement        go to state 194


state 189

   22 variables: variables . ',' variable
  102 variables_e: type variables .

    ','  shift, and go to state 49

    $default  reduce using rule 102 (variables_e)


state 190

   93 statement: FOR '(' variables_e ';' . expr_e ';' expr_e ')' statement

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    $default  reduce using rule 103 (expr_e)

    expr             go to state 165
    qualifiedname    go to state 73
    qualnameorarray  go to state 74
    expr_e           go to state 195


state 191

   97 statement: '{' @3 statements '}' .

    $default  reduce using rule 97 (statement)


state 192

   56 expr: expr . EQ expr
   57     | expr . NE expr
   58     | expr . '<' expr
   59     | expr . SE expr
   60     | expr . '>' expr
   61     | expr . LE expr
   62     | expr . '+' expr
   63     | expr . '-' expr
   64     | expr . '*' expr
   65     | expr . '/' expr
   66     | expr . '%' expr
   67     | expr . AND expr
   68     | expr . OR expr
   69     | expr . IS type
   79 arrayindex: '[' expr ',' expr ',' expr . ']'
   81 qualifiedname: expr . '.' IDENT
   84 qualnameorarray: expr . '.' IDENT
   85                | expr . '.' IDENT arrayindex

    IS   shift, and go to state 96
    OR   shift, and go to state 97
    AND  shift, and go to state 98
    NE   shift, and go to state 99
    EQ   shift, and go to state 100
    '>'  shift, and go to state 101
    '<'  shift, and go to state 102
    SE   shift, and go to state 103
    LE   shift, and go to state 104
    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    '*'  shift, and go to state 107
    '/'  shift, and go to state 108
    '%'  shift, and go to state 109
    '.'  shift, and go to state 110
    ']'  shift, and go to state 196


state 193

   90 statement: IF '(' expr ')' statement .
   91          | IF '(' expr ')' statement . ELSE statement

    ELSE  shift, and go to state 197

    $default  reduce using rule 90 (statement)


state 194

   92 statement: WHILE '(' expr ')' statement .

    $default  reduce using rule 92 (statement)


state 195

   93 statement: FOR '(' variables_e ';' expr_e . ';' expr_e ')' statement

    ';'  shift, and go to state 198


state 196

   79 arrayindex: '[' expr ',' expr ',' expr ']' .

    $default  reduce using rule 79 (arrayindex)


state 197

   91 statement: IF '(' expr ')' statement ELSE . statement

    IDENT      shift, and go to state 142
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    IF         shift, and go to state 143
    WHILE      shift, and go to state 144
    FOR        shift, and go to state 145
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    RETURN     shift, and go to state 146
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71
    '{'        shift, and go to state 147

    type             go to state 149
    noarraytype      go to state 26
    basictype        go to state 27
    arraytype        go to state 28
    expr             go to state 150
    qualifiedname    go to state 73
    qualnameorarray  go to state 74
    statement        go to state 199


state 198

   93 statement: FOR '(' variables_e ';' expr_e ';' . expr_e ')' statement

    IDENT      shift, and go to state 58
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71

    $default  reduce using rule 103 (expr_e)

    expr             go to state 165
    qualifiedname    go to state 73
    qualnameorarray  go to state 74
    expr_e           go to state 200


state 199

   91 statement: IF '(' expr ')' statement ELSE statement .

    $default  reduce using rule 91 (statement)


state 200

   93 statement: FOR '(' variables_e ';' expr_e ';' expr_e . ')' statement

    ')'  shift, and go to state 201


state 201

   93 statement: FOR '(' variables_e ';' expr_e ';' expr_e ')' . statement

    IDENT      shift, and go to state 142
    INTEGER    shift, and go to state 59
    REAL       shift, and go to state 60
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    IF         shift, and go to state 143
    WHILE      shift, and go to state 144
    FOR        shift, and go to state 145
    FALSE      shift, and go to state 61
    TRUE       shift, and go to state 62
    NEW        shift, and go to state 63
    THIS       shift, and go to state 64
    NUL        shift, and go to state 65
    RETURN     shift, and go to state 146
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '!'        shift, and go to state 68
    DECREMENT  shift, and go to state 69
    INCREMENT  shift, and go to state 70
    '('        shift, and go to state 71
    '{'        shift, and go to state 147

    type             go to state 149
    noarraytype      go to state 26
    basictype        go to state 27
    arraytype        go to state 28
    expr             go to state 150
    qualifiedname    go to state 73
    qualnameorarray  go to state 74
    statement        go to state 202


state 202

   93 statement: FOR '(' variables_e ';' expr_e ';' expr_e ')' statement .

    $default  reduce using rule 93 (statement)
