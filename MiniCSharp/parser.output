Terminals which are not used

   EXTENDS
   INSTANCEOF
   NEW
   THIS
   PRIVATE
   STATIC
   '.'


Grammar

    0 $accept: class_def $end

    1 class_def: CLASS IDENT '{' fields '}'

    2 fields: /* empty */
    3       | fields field

    4 field: variable
    5      | method

    6 @1: /* empty */

    7 method: expr_type IDENT '(' @1 params_e ')' '{' insts '}'

    8 @2: /* empty */

    9 method: VOID IDENT '(' @2 params_e ')' '{' insts '}'

   10 variable: expr_type var_decls ';'

   11 var_decls: var_decl
   12          | var_decls ',' var_decl

   13 var_decl: IDENT
   14         | IDENT '=' expr

   15 param: expr_type IDENT

   16 params: param
   17       | params ',' param

   18 params_e: /* empty */
   19         | params

   20 expr_type: INT
   21          | DOUBLE
   22          | BOOLEAN

   23 expr: INTEGER
   24     | REAL
   25     | TRUE
   26     | FALSE
   27     | NUL
   28     | '(' expr ')'
   29     | IDENT
   30     | IDENT '=' expr
   31     | IDENT '(' expr_list_e ')'
   32     | '!' expr
   33     | '-' expr
   34     | '+' expr
   35     | INCREMENT IDENT
   36     | DECREMENT IDENT
   37     | IDENT INCREMENT
   38     | IDENT DECREMENT
   39     | expr '+' expr
   40     | expr '-' expr
   41     | expr '*' expr
   42     | expr '/' expr
   43     | expr '%' expr
   44     | expr '<' expr
   45     | expr '>' expr
   46     | expr LE expr
   47     | expr SE expr
   48     | expr EQ expr
   49     | expr NE expr
   50     | expr AND expr
   51     | expr OR expr

   52 expr_list: expr
   53          | expr_list ',' expr

   54 expr_list_e: /* empty */
   55            | expr_list

   56 inst: expr ';'
   57     | expr_type var_decls ';'
   58     | IF '(' expr ')' inst
   59     | IF '(' expr ')' inst ELSE inst
   60     | WHILE '(' expr ')' inst
   61     | FOR '(' vars_decl_e ';' expr_e ';' expr_e ')' inst
   62     | RETURN expr_e ';'

   63 @3: /* empty */

   64 inst: '{' @3 insts '}'

   65 insts: /* empty */
   66      | insts inst

   67 vars_decl_e: /* empty */
   68            | expr_type var_decls

   69 expr_e: /* empty */
   70       | expr


Terminals, with rules where they appear

$end (0) 0
'!' (33) 32
'%' (37) 43
'(' (40) 7 9 28 31 58 59 60 61
')' (41) 7 9 28 31 58 59 60 61
'*' (42) 41
'+' (43) 34 39
',' (44) 12 17 53
'-' (45) 33 40
'.' (46)
'/' (47) 42
';' (59) 10 56 57 61 62
'<' (60) 44
'=' (61) 14 30
'>' (62) 45
'{' (123) 1 7 9 64
'}' (125) 1 7 9 64
error (256)
IDENT (258) 1 7 9 13 14 15 29 30 31 35 36 37 38
INTEGER (259) 23
REAL (260) 24
CLASS (261) 1
BOOLEAN (262) 22
DOUBLE (263) 21
INT (264) 20
IF (265) 58 59
ELSE (266) 59
WHILE (267) 60
FOR (268) 61
FALSE (269) 26
TRUE (270) 25
EXTENDS (271)
INSTANCEOF (272)
NEW (273)
THIS (274)
NUL (275) 27
PRIVATE (276)
STATIC (277)
VOID (278) 9
RETURN (279) 62
IF_PREC (280)
OR (281) 51
AND (282) 50
NE (283) 49
EQ (284) 48
SE (285) 47
LE (286) 46
UNARY_OP (287)
DECREMENT (288) 36 38
INCREMENT (289) 35 37


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
class_def (52)
    on left: 1, on right: 0
fields (53)
    on left: 2 3, on right: 1 3
field (54)
    on left: 4 5, on right: 3
method (55)
    on left: 7 9, on right: 5
@1 (56)
    on left: 6, on right: 7
@2 (57)
    on left: 8, on right: 9
variable (58)
    on left: 10, on right: 4
var_decls (59)
    on left: 11 12, on right: 10 12 57 68
var_decl (60)
    on left: 13 14, on right: 11 12
param (61)
    on left: 15, on right: 16 17
params (62)
    on left: 16 17, on right: 17 19
params_e (63)
    on left: 18 19, on right: 7 9
expr_type (64)
    on left: 20 21 22, on right: 7 10 15 57 68
expr (65)
    on left: 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
    41 42 43 44 45 46 47 48 49 50 51, on right: 14 28 30 32 33 34 39
    40 41 42 43 44 45 46 47 48 49 50 51 52 53 56 58 59 60 70
expr_list (66)
    on left: 52 53, on right: 53 55
expr_list_e (67)
    on left: 54 55, on right: 31
inst (68)
    on left: 56 57 58 59 60 61 62 64, on right: 58 59 60 61 66
@3 (69)
    on left: 63, on right: 64
insts (70)
    on left: 65 66, on right: 7 9 64 66
vars_decl_e (71)
    on left: 67 68, on right: 61
expr_e (72)
    on left: 69 70, on right: 61 62


state 0

    0 $accept: . class_def $end

    CLASS  shift, and go to state 1

    class_def  go to state 2


state 1

    1 class_def: CLASS . IDENT '{' fields '}'

    IDENT  shift, and go to state 3


state 2

    0 $accept: class_def . $end

    $end  shift, and go to state 4


state 3

    1 class_def: CLASS IDENT . '{' fields '}'

    '{'  shift, and go to state 5


state 4

    0 $accept: class_def $end .

    $default  accept


state 5

    1 class_def: CLASS IDENT '{' . fields '}'

    $default  reduce using rule 2 (fields)

    fields  go to state 6


state 6

    1 class_def: CLASS IDENT '{' fields . '}'
    3 fields: fields . field

    BOOLEAN  shift, and go to state 7
    DOUBLE   shift, and go to state 8
    INT      shift, and go to state 9
    VOID     shift, and go to state 10
    '}'      shift, and go to state 11

    field      go to state 12
    method     go to state 13
    variable   go to state 14
    expr_type  go to state 15


state 7

   22 expr_type: BOOLEAN .

    $default  reduce using rule 22 (expr_type)


state 8

   21 expr_type: DOUBLE .

    $default  reduce using rule 21 (expr_type)


state 9

   20 expr_type: INT .

    $default  reduce using rule 20 (expr_type)


state 10

    9 method: VOID . IDENT '(' @2 params_e ')' '{' insts '}'

    IDENT  shift, and go to state 16


state 11

    1 class_def: CLASS IDENT '{' fields '}' .

    $default  reduce using rule 1 (class_def)


state 12

    3 fields: fields field .

    $default  reduce using rule 3 (fields)


state 13

    5 field: method .

    $default  reduce using rule 5 (field)


state 14

    4 field: variable .

    $default  reduce using rule 4 (field)


state 15

    7 method: expr_type . IDENT '(' @1 params_e ')' '{' insts '}'
   10 variable: expr_type . var_decls ';'

    IDENT  shift, and go to state 17

    var_decls  go to state 18
    var_decl   go to state 19


state 16

    9 method: VOID IDENT . '(' @2 params_e ')' '{' insts '}'

    '('  shift, and go to state 20


state 17

    7 method: expr_type IDENT . '(' @1 params_e ')' '{' insts '}'
   13 var_decl: IDENT .
   14         | IDENT . '=' expr

    '='  shift, and go to state 21
    '('  shift, and go to state 22

    $default  reduce using rule 13 (var_decl)


state 18

   10 variable: expr_type var_decls . ';'
   12 var_decls: var_decls . ',' var_decl

    ';'  shift, and go to state 23
    ','  shift, and go to state 24


state 19

   11 var_decls: var_decl .

    $default  reduce using rule 11 (var_decls)


state 20

    9 method: VOID IDENT '(' . @2 params_e ')' '{' insts '}'

    $default  reduce using rule 8 (@2)

    @2  go to state 25


state 21

   14 var_decl: IDENT '=' . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 38


state 22

    7 method: expr_type IDENT '(' . @1 params_e ')' '{' insts '}'

    $default  reduce using rule 6 (@1)

    @1  go to state 39


state 23

   10 variable: expr_type var_decls ';' .

    $default  reduce using rule 10 (variable)


state 24

   12 var_decls: var_decls ',' . var_decl

    IDENT  shift, and go to state 40

    var_decl  go to state 41


state 25

    9 method: VOID IDENT '(' @2 . params_e ')' '{' insts '}'

    BOOLEAN  shift, and go to state 7
    DOUBLE   shift, and go to state 8
    INT      shift, and go to state 9

    $default  reduce using rule 18 (params_e)

    param      go to state 42
    params     go to state 43
    params_e   go to state 44
    expr_type  go to state 45


state 26

   29 expr: IDENT .
   30     | IDENT . '=' expr
   31     | IDENT . '(' expr_list_e ')'
   37     | IDENT . INCREMENT
   38     | IDENT . DECREMENT

    '='        shift, and go to state 46
    DECREMENT  shift, and go to state 47
    INCREMENT  shift, and go to state 48
    '('        shift, and go to state 49

    $default  reduce using rule 29 (expr)


state 27

   23 expr: INTEGER .

    $default  reduce using rule 23 (expr)


state 28

   24 expr: REAL .

    $default  reduce using rule 24 (expr)


state 29

   26 expr: FALSE .

    $default  reduce using rule 26 (expr)


state 30

   25 expr: TRUE .

    $default  reduce using rule 25 (expr)


state 31

   27 expr: NUL .

    $default  reduce using rule 27 (expr)


state 32

   34 expr: '+' . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 50


state 33

   33 expr: '-' . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 51


state 34

   32 expr: '!' . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 52


state 35

   36 expr: DECREMENT . IDENT

    IDENT  shift, and go to state 53


state 36

   35 expr: INCREMENT . IDENT

    IDENT  shift, and go to state 54


state 37

   28 expr: '(' . expr ')'

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 55


state 38

   14 var_decl: IDENT '=' expr .
   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    OR   shift, and go to state 56
    AND  shift, and go to state 57
    NE   shift, and go to state 58
    EQ   shift, and go to state 59
    '>'  shift, and go to state 60
    '<'  shift, and go to state 61
    SE   shift, and go to state 62
    LE   shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 14 (var_decl)


state 39

    7 method: expr_type IDENT '(' @1 . params_e ')' '{' insts '}'

    BOOLEAN  shift, and go to state 7
    DOUBLE   shift, and go to state 8
    INT      shift, and go to state 9

    $default  reduce using rule 18 (params_e)

    param      go to state 42
    params     go to state 43
    params_e   go to state 69
    expr_type  go to state 45


state 40

   13 var_decl: IDENT .
   14         | IDENT . '=' expr

    '='  shift, and go to state 21

    $default  reduce using rule 13 (var_decl)


state 41

   12 var_decls: var_decls ',' var_decl .

    $default  reduce using rule 12 (var_decls)


state 42

   16 params: param .

    $default  reduce using rule 16 (params)


state 43

   17 params: params . ',' param
   19 params_e: params .

    ','  shift, and go to state 70

    $default  reduce using rule 19 (params_e)


state 44

    9 method: VOID IDENT '(' @2 params_e . ')' '{' insts '}'

    ')'  shift, and go to state 71


state 45

   15 param: expr_type . IDENT

    IDENT  shift, and go to state 72


state 46

   30 expr: IDENT '=' . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 73


state 47

   38 expr: IDENT DECREMENT .

    $default  reduce using rule 38 (expr)


state 48

   37 expr: IDENT INCREMENT .

    $default  reduce using rule 37 (expr)


state 49

   31 expr: IDENT '(' . expr_list_e ')'

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    $default  reduce using rule 54 (expr_list_e)

    expr         go to state 74
    expr_list    go to state 75
    expr_list_e  go to state 76


state 50

   34 expr: '+' expr .
   39     | expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    $default  reduce using rule 34 (expr)


state 51

   33 expr: '-' expr .
   39     | expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    $default  reduce using rule 33 (expr)


state 52

   32 expr: '!' expr .
   39     | expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    $default  reduce using rule 32 (expr)


state 53

   36 expr: DECREMENT IDENT .

    $default  reduce using rule 36 (expr)


state 54

   35 expr: INCREMENT IDENT .

    $default  reduce using rule 35 (expr)


state 55

   28 expr: '(' expr . ')'
   39     | expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    OR   shift, and go to state 56
    AND  shift, and go to state 57
    NE   shift, and go to state 58
    EQ   shift, and go to state 59
    '>'  shift, and go to state 60
    '<'  shift, and go to state 61
    SE   shift, and go to state 62
    LE   shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68
    ')'  shift, and go to state 77


state 56

   51 expr: expr OR . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 78


state 57

   50 expr: expr AND . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 79


state 58

   49 expr: expr NE . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 80


state 59

   48 expr: expr EQ . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 81


state 60

   45 expr: expr '>' . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 82


state 61

   44 expr: expr '<' . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 83


state 62

   47 expr: expr SE . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 84


state 63

   46 expr: expr LE . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 85


state 64

   39 expr: expr '+' . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 86


state 65

   40 expr: expr '-' . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 87


state 66

   41 expr: expr '*' . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 88


state 67

   42 expr: expr '/' . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 89


state 68

   43 expr: expr '%' . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 90


state 69

    7 method: expr_type IDENT '(' @1 params_e . ')' '{' insts '}'

    ')'  shift, and go to state 91


state 70

   17 params: params ',' . param

    BOOLEAN  shift, and go to state 7
    DOUBLE   shift, and go to state 8
    INT      shift, and go to state 9

    param      go to state 92
    expr_type  go to state 45


state 71

    9 method: VOID IDENT '(' @2 params_e ')' . '{' insts '}'

    '{'  shift, and go to state 93


state 72

   15 param: expr_type IDENT .

    $default  reduce using rule 15 (param)


state 73

   30 expr: IDENT '=' expr .
   39     | expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    OR   shift, and go to state 56
    AND  shift, and go to state 57
    NE   shift, and go to state 58
    EQ   shift, and go to state 59
    '>'  shift, and go to state 60
    '<'  shift, and go to state 61
    SE   shift, and go to state 62
    LE   shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 30 (expr)


state 74

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr
   52 expr_list: expr .

    OR   shift, and go to state 56
    AND  shift, and go to state 57
    NE   shift, and go to state 58
    EQ   shift, and go to state 59
    '>'  shift, and go to state 60
    '<'  shift, and go to state 61
    SE   shift, and go to state 62
    LE   shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 52 (expr_list)


state 75

   53 expr_list: expr_list . ',' expr
   55 expr_list_e: expr_list .

    ','  shift, and go to state 94

    $default  reduce using rule 55 (expr_list_e)


state 76

   31 expr: IDENT '(' expr_list_e . ')'

    ')'  shift, and go to state 95


state 77

   28 expr: '(' expr ')' .

    $default  reduce using rule 28 (expr)


state 78

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr
   51     | expr OR expr .

    AND  shift, and go to state 57
    NE   shift, and go to state 58
    EQ   shift, and go to state 59
    '>'  shift, and go to state 60
    '<'  shift, and go to state 61
    SE   shift, and go to state 62
    LE   shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 51 (expr)


state 79

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   50     | expr AND expr .
   51     | expr . OR expr

    NE   shift, and go to state 58
    EQ   shift, and go to state 59
    '>'  shift, and go to state 60
    '<'  shift, and go to state 61
    SE   shift, and go to state 62
    LE   shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 50 (expr)


state 80

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   49     | expr NE expr .
   50     | expr . AND expr
   51     | expr . OR expr

    '>'  shift, and go to state 60
    '<'  shift, and go to state 61
    SE   shift, and go to state 62
    LE   shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 49 (expr)


state 81

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   48     | expr EQ expr .
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    '>'  shift, and go to state 60
    '<'  shift, and go to state 61
    SE   shift, and go to state 62
    LE   shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 48 (expr)


state 82

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   45     | expr '>' expr .
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 45 (expr)


state 83

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   44     | expr '<' expr .
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 44 (expr)


state 84

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   47     | expr SE expr .
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 47 (expr)


state 85

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   46     | expr LE expr .
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 46 (expr)


state 86

   39 expr: expr . '+' expr
   39     | expr '+' expr .
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 39 (expr)


state 87

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   40     | expr '-' expr .
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 40 (expr)


state 88

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   41     | expr '*' expr .
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    $default  reduce using rule 41 (expr)


state 89

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   42     | expr '/' expr .
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    $default  reduce using rule 42 (expr)


state 90

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   43     | expr '%' expr .
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    $default  reduce using rule 43 (expr)


state 91

    7 method: expr_type IDENT '(' @1 params_e ')' . '{' insts '}'

    '{'  shift, and go to state 96


state 92

   17 params: params ',' param .

    $default  reduce using rule 17 (params)


state 93

    9 method: VOID IDENT '(' @2 params_e ')' '{' . insts '}'

    $default  reduce using rule 65 (insts)

    insts  go to state 97


state 94

   53 expr_list: expr_list ',' . expr

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 98


state 95

   31 expr: IDENT '(' expr_list_e ')' .

    $default  reduce using rule 31 (expr)


state 96

    7 method: expr_type IDENT '(' @1 params_e ')' '{' . insts '}'

    $default  reduce using rule 65 (insts)

    insts  go to state 99


state 97

    9 method: VOID IDENT '(' @2 params_e ')' '{' insts . '}'
   66 insts: insts . inst

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    BOOLEAN    shift, and go to state 7
    DOUBLE     shift, and go to state 8
    INT        shift, and go to state 9
    IF         shift, and go to state 100
    WHILE      shift, and go to state 101
    FOR        shift, and go to state 102
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    RETURN     shift, and go to state 103
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37
    '{'        shift, and go to state 104
    '}'        shift, and go to state 105

    expr_type  go to state 106
    expr       go to state 107
    inst       go to state 108


state 98

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr
   53 expr_list: expr_list ',' expr .

    OR   shift, and go to state 56
    AND  shift, and go to state 57
    NE   shift, and go to state 58
    EQ   shift, and go to state 59
    '>'  shift, and go to state 60
    '<'  shift, and go to state 61
    SE   shift, and go to state 62
    LE   shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 53 (expr_list)


state 99

    7 method: expr_type IDENT '(' @1 params_e ')' '{' insts . '}'
   66 insts: insts . inst

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    BOOLEAN    shift, and go to state 7
    DOUBLE     shift, and go to state 8
    INT        shift, and go to state 9
    IF         shift, and go to state 100
    WHILE      shift, and go to state 101
    FOR        shift, and go to state 102
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    RETURN     shift, and go to state 103
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37
    '{'        shift, and go to state 104
    '}'        shift, and go to state 109

    expr_type  go to state 106
    expr       go to state 107
    inst       go to state 108


state 100

   58 inst: IF . '(' expr ')' inst
   59     | IF . '(' expr ')' inst ELSE inst

    '('  shift, and go to state 110


state 101

   60 inst: WHILE . '(' expr ')' inst

    '('  shift, and go to state 111


state 102

   61 inst: FOR . '(' vars_decl_e ';' expr_e ';' expr_e ')' inst

    '('  shift, and go to state 112


state 103

   62 inst: RETURN . expr_e ';'

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    $default  reduce using rule 69 (expr_e)

    expr    go to state 113
    expr_e  go to state 114


state 104

   64 inst: '{' . @3 insts '}'

    $default  reduce using rule 63 (@3)

    @3  go to state 115


state 105

    9 method: VOID IDENT '(' @2 params_e ')' '{' insts '}' .

    $default  reduce using rule 9 (method)


state 106

   57 inst: expr_type . var_decls ';'

    IDENT  shift, and go to state 40

    var_decls  go to state 116
    var_decl   go to state 19


state 107

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr
   56 inst: expr . ';'

    OR   shift, and go to state 56
    AND  shift, and go to state 57
    NE   shift, and go to state 58
    EQ   shift, and go to state 59
    '>'  shift, and go to state 60
    '<'  shift, and go to state 61
    SE   shift, and go to state 62
    LE   shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68
    ';'  shift, and go to state 117


state 108

   66 insts: insts inst .

    $default  reduce using rule 66 (insts)


state 109

    7 method: expr_type IDENT '(' @1 params_e ')' '{' insts '}' .

    $default  reduce using rule 7 (method)


state 110

   58 inst: IF '(' . expr ')' inst
   59     | IF '(' . expr ')' inst ELSE inst

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 118


state 111

   60 inst: WHILE '(' . expr ')' inst

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    expr  go to state 119


state 112

   61 inst: FOR '(' . vars_decl_e ';' expr_e ';' expr_e ')' inst

    BOOLEAN  shift, and go to state 7
    DOUBLE   shift, and go to state 8
    INT      shift, and go to state 9

    $default  reduce using rule 67 (vars_decl_e)

    expr_type    go to state 120
    vars_decl_e  go to state 121


state 113

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr
   70 expr_e: expr .

    OR   shift, and go to state 56
    AND  shift, and go to state 57
    NE   shift, and go to state 58
    EQ   shift, and go to state 59
    '>'  shift, and go to state 60
    '<'  shift, and go to state 61
    SE   shift, and go to state 62
    LE   shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68

    $default  reduce using rule 70 (expr_e)


state 114

   62 inst: RETURN expr_e . ';'

    ';'  shift, and go to state 122


state 115

   64 inst: '{' @3 . insts '}'

    $default  reduce using rule 65 (insts)

    insts  go to state 123


state 116

   12 var_decls: var_decls . ',' var_decl
   57 inst: expr_type var_decls . ';'

    ';'  shift, and go to state 124
    ','  shift, and go to state 24


state 117

   56 inst: expr ';' .

    $default  reduce using rule 56 (inst)


state 118

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr
   58 inst: IF '(' expr . ')' inst
   59     | IF '(' expr . ')' inst ELSE inst

    OR   shift, and go to state 56
    AND  shift, and go to state 57
    NE   shift, and go to state 58
    EQ   shift, and go to state 59
    '>'  shift, and go to state 60
    '<'  shift, and go to state 61
    SE   shift, and go to state 62
    LE   shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68
    ')'  shift, and go to state 125


state 119

   39 expr: expr . '+' expr
   40     | expr . '-' expr
   41     | expr . '*' expr
   42     | expr . '/' expr
   43     | expr . '%' expr
   44     | expr . '<' expr
   45     | expr . '>' expr
   46     | expr . LE expr
   47     | expr . SE expr
   48     | expr . EQ expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr
   60 inst: WHILE '(' expr . ')' inst

    OR   shift, and go to state 56
    AND  shift, and go to state 57
    NE   shift, and go to state 58
    EQ   shift, and go to state 59
    '>'  shift, and go to state 60
    '<'  shift, and go to state 61
    SE   shift, and go to state 62
    LE   shift, and go to state 63
    '+'  shift, and go to state 64
    '-'  shift, and go to state 65
    '*'  shift, and go to state 66
    '/'  shift, and go to state 67
    '%'  shift, and go to state 68
    ')'  shift, and go to state 126


state 120

   68 vars_decl_e: expr_type . var_decls

    IDENT  shift, and go to state 40

    var_decls  go to state 127
    var_decl   go to state 19


state 121

   61 inst: FOR '(' vars_decl_e . ';' expr_e ';' expr_e ')' inst

    ';'  shift, and go to state 128


state 122

   62 inst: RETURN expr_e ';' .

    $default  reduce using rule 62 (inst)


state 123

   64 inst: '{' @3 insts . '}'
   66 insts: insts . inst

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    BOOLEAN    shift, and go to state 7
    DOUBLE     shift, and go to state 8
    INT        shift, and go to state 9
    IF         shift, and go to state 100
    WHILE      shift, and go to state 101
    FOR        shift, and go to state 102
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    RETURN     shift, and go to state 103
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37
    '{'        shift, and go to state 104
    '}'        shift, and go to state 129

    expr_type  go to state 106
    expr       go to state 107
    inst       go to state 108


state 124

   57 inst: expr_type var_decls ';' .

    $default  reduce using rule 57 (inst)


state 125

   58 inst: IF '(' expr ')' . inst
   59     | IF '(' expr ')' . inst ELSE inst

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    BOOLEAN    shift, and go to state 7
    DOUBLE     shift, and go to state 8
    INT        shift, and go to state 9
    IF         shift, and go to state 100
    WHILE      shift, and go to state 101
    FOR        shift, and go to state 102
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    RETURN     shift, and go to state 103
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37
    '{'        shift, and go to state 104

    expr_type  go to state 106
    expr       go to state 107
    inst       go to state 130


state 126

   60 inst: WHILE '(' expr ')' . inst

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    BOOLEAN    shift, and go to state 7
    DOUBLE     shift, and go to state 8
    INT        shift, and go to state 9
    IF         shift, and go to state 100
    WHILE      shift, and go to state 101
    FOR        shift, and go to state 102
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    RETURN     shift, and go to state 103
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37
    '{'        shift, and go to state 104

    expr_type  go to state 106
    expr       go to state 107
    inst       go to state 131


state 127

   12 var_decls: var_decls . ',' var_decl
   68 vars_decl_e: expr_type var_decls .

    ','  shift, and go to state 24

    $default  reduce using rule 68 (vars_decl_e)


state 128

   61 inst: FOR '(' vars_decl_e ';' . expr_e ';' expr_e ')' inst

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    $default  reduce using rule 69 (expr_e)

    expr    go to state 113
    expr_e  go to state 132


state 129

   64 inst: '{' @3 insts '}' .

    $default  reduce using rule 64 (inst)


state 130

   58 inst: IF '(' expr ')' inst .
   59     | IF '(' expr ')' inst . ELSE inst

    ELSE  shift, and go to state 133

    $default  reduce using rule 58 (inst)


state 131

   60 inst: WHILE '(' expr ')' inst .

    $default  reduce using rule 60 (inst)


state 132

   61 inst: FOR '(' vars_decl_e ';' expr_e . ';' expr_e ')' inst

    ';'  shift, and go to state 134


state 133

   59 inst: IF '(' expr ')' inst ELSE . inst

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    BOOLEAN    shift, and go to state 7
    DOUBLE     shift, and go to state 8
    INT        shift, and go to state 9
    IF         shift, and go to state 100
    WHILE      shift, and go to state 101
    FOR        shift, and go to state 102
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    RETURN     shift, and go to state 103
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37
    '{'        shift, and go to state 104

    expr_type  go to state 106
    expr       go to state 107
    inst       go to state 135


state 134

   61 inst: FOR '(' vars_decl_e ';' expr_e ';' . expr_e ')' inst

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37

    $default  reduce using rule 69 (expr_e)

    expr    go to state 113
    expr_e  go to state 136


state 135

   59 inst: IF '(' expr ')' inst ELSE inst .

    $default  reduce using rule 59 (inst)


state 136

   61 inst: FOR '(' vars_decl_e ';' expr_e ';' expr_e . ')' inst

    ')'  shift, and go to state 137


state 137

   61 inst: FOR '(' vars_decl_e ';' expr_e ';' expr_e ')' . inst

    IDENT      shift, and go to state 26
    INTEGER    shift, and go to state 27
    REAL       shift, and go to state 28
    BOOLEAN    shift, and go to state 7
    DOUBLE     shift, and go to state 8
    INT        shift, and go to state 9
    IF         shift, and go to state 100
    WHILE      shift, and go to state 101
    FOR        shift, and go to state 102
    FALSE      shift, and go to state 29
    TRUE       shift, and go to state 30
    NUL        shift, and go to state 31
    RETURN     shift, and go to state 103
    '+'        shift, and go to state 32
    '-'        shift, and go to state 33
    '!'        shift, and go to state 34
    DECREMENT  shift, and go to state 35
    INCREMENT  shift, and go to state 36
    '('        shift, and go to state 37
    '{'        shift, and go to state 104

    expr_type  go to state 106
    expr       go to state 107
    inst       go to state 138


state 138

   61 inst: FOR '(' vars_decl_e ';' expr_e ';' expr_e ')' inst .

    $default  reduce using rule 61 (inst)
