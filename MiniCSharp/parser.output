Terminals which are not used

   EXTENDS
   INSTANCEOF


Grammar

    0 $accept: root $end

    1 root: /* empty */
    2     | root class

    3 class: CLASS IDENT '{' members '}'
    4      | CLASS IDENT ':' IDENT '{' members '}'

    5 members: /* empty */
    6        | members member

    7 member: global
    8       | constructor
    9       | function

   10 global: accessmodif type variables ';'

   11 constructor: accessmodif IDENT '(' args_e ')' '{' statements '}'

   12 @1: /* empty */

   13 function: accessmodif type IDENT '(' @1 args_e ')' '{' statements '}'

   14 @2: /* empty */

   15 function: accessmodif VOID IDENT '(' @2 args_e ')' '{' statements '}'

   16 arg: type IDENT

   17 args: arg
   18     | args ',' arg

   19 args_e: /* empty */
   20       | args

   21 variables: variable
   22          | variables ',' variable

   23 variable: IDENT
   24         | IDENT '=' expr

   25 accessmodif: /* empty */
   26            | PRIVATE
   27            | STATIC
   28            | PRIVATE STATIC

   29 type: noarraytype
   30     | arraytype

   31 noarraytype: IDENT
   32            | basictype

   33 basictype: OBJECT
   34          | BOOLEAN
   35          | INT
   36          | DOUBLE

   37 arraytype: IDENT '[' ']'
   38          | IDENT '[' ',' ']'
   39          | IDENT '[' ',' ',' ']'
   40          | basictype '[' ']'
   41          | basictype '[' ',' ']'
   42          | basictype '[' ',' ',' ']'

   43 expr: INCREMENT IDENT
   44     | DECREMENT IDENT
   45     | IDENT INCREMENT
   46     | IDENT DECREMENT
   47     | '!' expr
   48     | '-' expr
   49     | '+' expr
   50     | '(' expr ')'
   51     | qualnameorarray
   52     | qualnameorarray '=' expr
   53     | qualifiedname '(' expr_list_e ')'
   54     | qualifiedname '(' expr_list_e ')' arrayindex
   55     | NEW IDENT '(' expr_list_e ')'
   56     | NEW IDENT arrayindex
   57     | expr EQ expr
   58     | expr NE expr
   59     | expr '<' expr
   60     | expr SE expr
   61     | expr '>' expr
   62     | expr LE expr
   63     | expr '+' expr
   64     | expr '-' expr
   65     | expr '*' expr
   66     | expr '/' expr
   67     | expr '%' expr
   68     | expr AND expr
   69     | expr OR expr
   70     | expr IS type
   71     | '(' basictype ')' expr
   72     | INTEGER
   73     | REAL
   74     | TRUE
   75     | FALSE
   76     | THIS
   77     | NUL

   78 arrayindex: '[' expr ']'
   79           | '[' expr ',' expr ']'
   80           | '[' expr ',' expr ',' expr ']'

   81 qualifiedname: IDENT
   82              | expr '.' IDENT

   83 qualnameorarray: IDENT
   84                | IDENT arrayindex
   85                | expr '.' IDENT
   86                | expr '.' IDENT arrayindex

   87 expr_list: expr
   88          | expr_list ',' expr

   89 expr_list_e: /* empty */
   90            | expr_list

   91 statement: IF '(' expr ')' statement
   92          | IF '(' expr ')' statement ELSE statement
   93          | WHILE '(' expr ')' statement
   94          | FOR '(' variables_e ';' expr_e ';' expr_e ')' statement
   95          | expr ';'
   96          | type variables ';'

   97 @3: /* empty */

   98 statement: '{' @3 statements '}'
   99          | RETURN expr_e ';'

  100 statements: /* empty */
  101           | statements statement

  102 variables_e: /* empty */
  103            | type variables

  104 expr_e: /* empty */
  105       | expr


Terminals, with rules where they appear

$end (0) 0
'!' (33) 47
'%' (37) 67
'(' (40) 11 13 15 50 53 54 55 71 91 92 93 94
')' (41) 11 13 15 50 53 54 55 71 91 92 93 94
'*' (42) 65
'+' (43) 49 63
',' (44) 18 22 38 39 41 42 79 80 88
'-' (45) 48 64
'.' (46) 82 85 86
'/' (47) 66
':' (58) 4
';' (59) 10 94 95 96 99
'<' (60) 59
'=' (61) 24 52
'>' (62) 61
'[' (91) 37 38 39 40 41 42 78 79 80
']' (93) 37 38 39 40 41 42 78 79 80
'{' (123) 3 4 11 13 15 98
'}' (125) 3 4 11 13 15 98
error (256)
IDENT (258) 3 4 11 13 15 16 23 24 31 37 38 39 43 44 45 46 55 56 81
    82 83 84 85 86
INTEGER (259) 72
REAL (260) 73
CLASS (261) 3 4
BOOLEAN (262) 34
DOUBLE (263) 36
INT (264) 35
IS (265) 70
OBJECT (266) 33
IF (267) 91 92
ELSE (268) 92
WHILE (269) 93
FOR (270) 94
FALSE (271) 75
TRUE (272) 74
EXTENDS (273)
INSTANCEOF (274)
NEW (275) 55 56
THIS (276) 76
NUL (277) 77
PRIVATE (278) 26 28
STATIC (279) 27 28
VOID (280) 15
RETURN (281) 99
IF_PREC (282)
OR (283) 69
AND (284) 68
NE (285) 58
EQ (286) 57
SE (287) 60
LE (288) 62
UNARY_OP (289)
DECREMENT (290) 44 46
INCREMENT (291) 43 45
change_type (292)


Nonterminals, with rules where they appear

$accept (57)
    on left: 0
root (58)
    on left: 1 2, on right: 0 2
class (59)
    on left: 3 4, on right: 2
members (60)
    on left: 5 6, on right: 3 4 6
member (61)
    on left: 7 8 9, on right: 6
global (62)
    on left: 10, on right: 7
constructor (63)
    on left: 11, on right: 8
function (64)
    on left: 13 15, on right: 9
@1 (65)
    on left: 12, on right: 13
@2 (66)
    on left: 14, on right: 15
arg (67)
    on left: 16, on right: 17 18
args (68)
    on left: 17 18, on right: 18 20
args_e (69)
    on left: 19 20, on right: 11 13 15
variables (70)
    on left: 21 22, on right: 10 22 96 103
variable (71)
    on left: 23 24, on right: 21 22
accessmodif (72)
    on left: 25 26 27 28, on right: 10 11 13 15
type (73)
    on left: 29 30, on right: 10 13 16 70 96 103
noarraytype (74)
    on left: 31 32, on right: 29
basictype (75)
    on left: 33 34 35 36, on right: 32 40 41 42 71
arraytype (76)
    on left: 37 38 39 40 41 42, on right: 30
expr (77)
    on left: 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
    61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77,
    on right: 24 47 48 49 50 52 57 58 59 60 61 62 63 64 65 66 67 68
    69 70 71 78 79 80 82 85 86 87 88 91 92 93 95 105
arrayindex (78)
    on left: 78 79 80, on right: 54 56 84 86
qualifiedname (79)
    on left: 81 82, on right: 53 54
qualnameorarray (80)
    on left: 83 84 85 86, on right: 51 52
expr_list (81)
    on left: 87 88, on right: 88 90
expr_list_e (82)
    on left: 89 90, on right: 53 54 55
statement (83)
    on left: 91 92 93 94 95 96 98 99, on right: 91 92 93 94 101
@3 (84)
    on left: 97, on right: 98
statements (85)
    on left: 100 101, on right: 11 13 15 98 101
variables_e (86)
    on left: 102 103, on right: 94
expr_e (87)
    on left: 104 105, on right: 94 99


state 0

    0 $accept: . root $end

    $default  reduce using rule 1 (root)

    root  go to state 1


state 1

    0 $accept: root . $end
    2 root: root . class

    $end   shift, and go to state 2
    CLASS  shift, and go to state 3

    class  go to state 4


state 2

    0 $accept: root $end .

    $default  accept


state 3

    3 class: CLASS . IDENT '{' members '}'
    4      | CLASS . IDENT ':' IDENT '{' members '}'

    IDENT  shift, and go to state 5


state 4

    2 root: root class .

    $default  reduce using rule 2 (root)


state 5

    3 class: CLASS IDENT . '{' members '}'
    4      | CLASS IDENT . ':' IDENT '{' members '}'

    '{'  shift, and go to state 6
    ':'  shift, and go to state 7


state 6

    3 class: CLASS IDENT '{' . members '}'

    $default  reduce using rule 5 (members)

    members  go to state 8


state 7

    4 class: CLASS IDENT ':' . IDENT '{' members '}'

    IDENT  shift, and go to state 9


state 8

    3 class: CLASS IDENT '{' members . '}'
    6 members: members . member

    PRIVATE  shift, and go to state 10
    STATIC   shift, and go to state 11
    '}'      shift, and go to state 12

    $default  reduce using rule 25 (accessmodif)

    member       go to state 13
    global       go to state 14
    constructor  go to state 15
    function     go to state 16
    accessmodif  go to state 17


state 9

    4 class: CLASS IDENT ':' IDENT . '{' members '}'

    '{'  shift, and go to state 18


state 10

   26 accessmodif: PRIVATE .
   28            | PRIVATE . STATIC

    STATIC  shift, and go to state 19

    $default  reduce using rule 26 (accessmodif)


state 11

   27 accessmodif: STATIC .

    $default  reduce using rule 27 (accessmodif)


state 12

    3 class: CLASS IDENT '{' members '}' .

    $default  reduce using rule 3 (class)


state 13

    6 members: members member .

    $default  reduce using rule 6 (members)


state 14

    7 member: global .

    $default  reduce using rule 7 (member)


state 15

    8 member: constructor .

    $default  reduce using rule 8 (member)


state 16

    9 member: function .

    $default  reduce using rule 9 (member)


state 17

   10 global: accessmodif . type variables ';'
   11 constructor: accessmodif . IDENT '(' args_e ')' '{' statements '}'
   13 function: accessmodif . type IDENT '(' @1 args_e ')' '{' statements '}'
   15         | accessmodif . VOID IDENT '(' @2 args_e ')' '{' statements '}'

    IDENT    shift, and go to state 20
    BOOLEAN  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    INT      shift, and go to state 23
    OBJECT   shift, and go to state 24
    VOID     shift, and go to state 25

    type         go to state 26
    noarraytype  go to state 27
    basictype    go to state 28
    arraytype    go to state 29


state 18

    4 class: CLASS IDENT ':' IDENT '{' . members '}'

    $default  reduce using rule 5 (members)

    members  go to state 30


state 19

   28 accessmodif: PRIVATE STATIC .

    $default  reduce using rule 28 (accessmodif)


state 20

   11 constructor: accessmodif IDENT . '(' args_e ')' '{' statements '}'
   31 noarraytype: IDENT .
   37 arraytype: IDENT . '[' ']'
   38          | IDENT . '[' ',' ']'
   39          | IDENT . '[' ',' ',' ']'

    '('  shift, and go to state 31
    '['  shift, and go to state 32

    $default  reduce using rule 31 (noarraytype)


state 21

   34 basictype: BOOLEAN .

    $default  reduce using rule 34 (basictype)


state 22

   36 basictype: DOUBLE .

    $default  reduce using rule 36 (basictype)


state 23

   35 basictype: INT .

    $default  reduce using rule 35 (basictype)


state 24

   33 basictype: OBJECT .

    $default  reduce using rule 33 (basictype)


state 25

   15 function: accessmodif VOID . IDENT '(' @2 args_e ')' '{' statements '}'

    IDENT  shift, and go to state 33


state 26

   10 global: accessmodif type . variables ';'
   13 function: accessmodif type . IDENT '(' @1 args_e ')' '{' statements '}'

    IDENT  shift, and go to state 34

    variables  go to state 35
    variable   go to state 36


state 27

   29 type: noarraytype .

    $default  reduce using rule 29 (type)


state 28

   32 noarraytype: basictype .
   40 arraytype: basictype . '[' ']'
   41          | basictype . '[' ',' ']'
   42          | basictype . '[' ',' ',' ']'

    '['  shift, and go to state 37

    $default  reduce using rule 32 (noarraytype)


state 29

   30 type: arraytype .

    $default  reduce using rule 30 (type)


state 30

    4 class: CLASS IDENT ':' IDENT '{' members . '}'
    6 members: members . member

    PRIVATE  shift, and go to state 10
    STATIC   shift, and go to state 11
    '}'      shift, and go to state 38

    $default  reduce using rule 25 (accessmodif)

    member       go to state 13
    global       go to state 14
    constructor  go to state 15
    function     go to state 16
    accessmodif  go to state 17


state 31

   11 constructor: accessmodif IDENT '(' . args_e ')' '{' statements '}'

    IDENT    shift, and go to state 39
    BOOLEAN  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    INT      shift, and go to state 23
    OBJECT   shift, and go to state 24

    $default  reduce using rule 19 (args_e)

    arg          go to state 40
    args         go to state 41
    args_e       go to state 42
    type         go to state 43
    noarraytype  go to state 27
    basictype    go to state 28
    arraytype    go to state 29


state 32

   37 arraytype: IDENT '[' . ']'
   38          | IDENT '[' . ',' ']'
   39          | IDENT '[' . ',' ',' ']'

    ','  shift, and go to state 44
    ']'  shift, and go to state 45


state 33

   15 function: accessmodif VOID IDENT . '(' @2 args_e ')' '{' statements '}'

    '('  shift, and go to state 46


state 34

   13 function: accessmodif type IDENT . '(' @1 args_e ')' '{' statements '}'
   23 variable: IDENT .
   24         | IDENT . '=' expr

    '='  shift, and go to state 47
    '('  shift, and go to state 48

    $default  reduce using rule 23 (variable)


state 35

   10 global: accessmodif type variables . ';'
   22 variables: variables . ',' variable

    ';'  shift, and go to state 49
    ','  shift, and go to state 50


state 36

   21 variables: variable .

    $default  reduce using rule 21 (variables)


state 37

   40 arraytype: basictype '[' . ']'
   41          | basictype '[' . ',' ']'
   42          | basictype '[' . ',' ',' ']'

    ','  shift, and go to state 51
    ']'  shift, and go to state 52


state 38

    4 class: CLASS IDENT ':' IDENT '{' members '}' .

    $default  reduce using rule 4 (class)


state 39

   31 noarraytype: IDENT .
   37 arraytype: IDENT . '[' ']'
   38          | IDENT . '[' ',' ']'
   39          | IDENT . '[' ',' ',' ']'

    '['  shift, and go to state 32

    $default  reduce using rule 31 (noarraytype)


state 40

   17 args: arg .

    $default  reduce using rule 17 (args)


state 41

   18 args: args . ',' arg
   20 args_e: args .

    ','  shift, and go to state 53

    $default  reduce using rule 20 (args_e)


state 42

   11 constructor: accessmodif IDENT '(' args_e . ')' '{' statements '}'

    ')'  shift, and go to state 54


state 43

   16 arg: type . IDENT

    IDENT  shift, and go to state 55


state 44

   38 arraytype: IDENT '[' ',' . ']'
   39          | IDENT '[' ',' . ',' ']'

    ','  shift, and go to state 56
    ']'  shift, and go to state 57


state 45

   37 arraytype: IDENT '[' ']' .

    $default  reduce using rule 37 (arraytype)


state 46

   15 function: accessmodif VOID IDENT '(' . @2 args_e ')' '{' statements '}'

    $default  reduce using rule 14 (@2)

    @2  go to state 58


state 47

   24 variable: IDENT '=' . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 73
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 48

   13 function: accessmodif type IDENT '(' . @1 args_e ')' '{' statements '}'

    $default  reduce using rule 12 (@1)

    @1  go to state 76


state 49

   10 global: accessmodif type variables ';' .

    $default  reduce using rule 10 (global)


state 50

   22 variables: variables ',' . variable

    IDENT  shift, and go to state 77

    variable  go to state 78


state 51

   41 arraytype: basictype '[' ',' . ']'
   42          | basictype '[' ',' . ',' ']'

    ','  shift, and go to state 79
    ']'  shift, and go to state 80


state 52

   40 arraytype: basictype '[' ']' .

    $default  reduce using rule 40 (arraytype)


state 53

   18 args: args ',' . arg

    IDENT    shift, and go to state 39
    BOOLEAN  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    INT      shift, and go to state 23
    OBJECT   shift, and go to state 24

    arg          go to state 81
    type         go to state 43
    noarraytype  go to state 27
    basictype    go to state 28
    arraytype    go to state 29


state 54

   11 constructor: accessmodif IDENT '(' args_e ')' . '{' statements '}'

    '{'  shift, and go to state 82


state 55

   16 arg: type IDENT .

    $default  reduce using rule 16 (arg)


state 56

   39 arraytype: IDENT '[' ',' ',' . ']'

    ']'  shift, and go to state 83


state 57

   38 arraytype: IDENT '[' ',' ']' .

    $default  reduce using rule 38 (arraytype)


state 58

   15 function: accessmodif VOID IDENT '(' @2 . args_e ')' '{' statements '}'

    IDENT    shift, and go to state 39
    BOOLEAN  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    INT      shift, and go to state 23
    OBJECT   shift, and go to state 24

    $default  reduce using rule 19 (args_e)

    arg          go to state 40
    args         go to state 41
    args_e       go to state 84
    type         go to state 43
    noarraytype  go to state 27
    basictype    go to state 28
    arraytype    go to state 29


state 59

   45 expr: IDENT . INCREMENT
   46     | IDENT . DECREMENT
   81 qualifiedname: IDENT .
   83 qualnameorarray: IDENT .
   84                | IDENT . arrayindex

    DECREMENT  shift, and go to state 85
    INCREMENT  shift, and go to state 86
    '['        shift, and go to state 87

    '('       reduce using rule 81 (qualifiedname)
    $default  reduce using rule 83 (qualnameorarray)

    arrayindex  go to state 88


state 60

   72 expr: INTEGER .

    $default  reduce using rule 72 (expr)


state 61

   73 expr: REAL .

    $default  reduce using rule 73 (expr)


state 62

   75 expr: FALSE .

    $default  reduce using rule 75 (expr)


state 63

   74 expr: TRUE .

    $default  reduce using rule 74 (expr)


state 64

   55 expr: NEW . IDENT '(' expr_list_e ')'
   56     | NEW . IDENT arrayindex

    IDENT  shift, and go to state 89


state 65

   76 expr: THIS .

    $default  reduce using rule 76 (expr)


state 66

   77 expr: NUL .

    $default  reduce using rule 77 (expr)


state 67

   49 expr: '+' . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 90
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 68

   48 expr: '-' . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 91
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 69

   47 expr: '!' . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 92
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 70

   44 expr: DECREMENT . IDENT

    IDENT  shift, and go to state 93


state 71

   43 expr: INCREMENT . IDENT

    IDENT  shift, and go to state 94


state 72

   50 expr: '(' . expr ')'
   71     | '(' . basictype ')' expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    OBJECT     shift, and go to state 24
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    basictype        go to state 95
    expr             go to state 96
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 73

   24 variable: IDENT '=' expr .
   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    IS   shift, and go to state 97
    OR   shift, and go to state 98
    AND  shift, and go to state 99
    NE   shift, and go to state 100
    EQ   shift, and go to state 101
    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    SE   shift, and go to state 104
    LE   shift, and go to state 105
    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111

    $default  reduce using rule 24 (variable)


state 74

   53 expr: qualifiedname . '(' expr_list_e ')'
   54     | qualifiedname . '(' expr_list_e ')' arrayindex

    '('  shift, and go to state 112


state 75

   51 expr: qualnameorarray .
   52     | qualnameorarray . '=' expr

    '='  shift, and go to state 113

    $default  reduce using rule 51 (expr)


state 76

   13 function: accessmodif type IDENT '(' @1 . args_e ')' '{' statements '}'

    IDENT    shift, and go to state 39
    BOOLEAN  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    INT      shift, and go to state 23
    OBJECT   shift, and go to state 24

    $default  reduce using rule 19 (args_e)

    arg          go to state 40
    args         go to state 41
    args_e       go to state 114
    type         go to state 43
    noarraytype  go to state 27
    basictype    go to state 28
    arraytype    go to state 29


state 77

   23 variable: IDENT .
   24         | IDENT . '=' expr

    '='  shift, and go to state 47

    $default  reduce using rule 23 (variable)


state 78

   22 variables: variables ',' variable .

    $default  reduce using rule 22 (variables)


state 79

   42 arraytype: basictype '[' ',' ',' . ']'

    ']'  shift, and go to state 115


state 80

   41 arraytype: basictype '[' ',' ']' .

    $default  reduce using rule 41 (arraytype)


state 81

   18 args: args ',' arg .

    $default  reduce using rule 18 (args)


state 82

   11 constructor: accessmodif IDENT '(' args_e ')' '{' . statements '}'

    $default  reduce using rule 100 (statements)

    statements  go to state 116


state 83

   39 arraytype: IDENT '[' ',' ',' ']' .

    $default  reduce using rule 39 (arraytype)


state 84

   15 function: accessmodif VOID IDENT '(' @2 args_e . ')' '{' statements '}'

    ')'  shift, and go to state 117


state 85

   46 expr: IDENT DECREMENT .

    $default  reduce using rule 46 (expr)


state 86

   45 expr: IDENT INCREMENT .

    $default  reduce using rule 45 (expr)


state 87

   78 arrayindex: '[' . expr ']'
   79           | '[' . expr ',' expr ']'
   80           | '[' . expr ',' expr ',' expr ']'

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 118
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 88

   84 qualnameorarray: IDENT arrayindex .

    $default  reduce using rule 84 (qualnameorarray)


state 89

   55 expr: NEW IDENT . '(' expr_list_e ')'
   56     | NEW IDENT . arrayindex

    '('  shift, and go to state 119
    '['  shift, and go to state 87

    arrayindex  go to state 120


state 90

   49 expr: '+' expr .
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    '.'  shift, and go to state 111

    $default  reduce using rule 49 (expr)


state 91

   48 expr: '-' expr .
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    '.'  shift, and go to state 111

    $default  reduce using rule 48 (expr)


state 92

   47 expr: '!' expr .
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    '.'  shift, and go to state 111

    $default  reduce using rule 47 (expr)


state 93

   44 expr: DECREMENT IDENT .

    $default  reduce using rule 44 (expr)


state 94

   43 expr: INCREMENT IDENT .

    $default  reduce using rule 43 (expr)


state 95

   71 expr: '(' basictype . ')' expr

    ')'  shift, and go to state 121


state 96

   50 expr: '(' expr . ')'
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    IS   shift, and go to state 97
    OR   shift, and go to state 98
    AND  shift, and go to state 99
    NE   shift, and go to state 100
    EQ   shift, and go to state 101
    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    SE   shift, and go to state 104
    LE   shift, and go to state 105
    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111
    ')'  shift, and go to state 122


state 97

   70 expr: expr IS . type

    IDENT    shift, and go to state 39
    BOOLEAN  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    INT      shift, and go to state 23
    OBJECT   shift, and go to state 24

    type         go to state 123
    noarraytype  go to state 27
    basictype    go to state 28
    arraytype    go to state 29


state 98

   69 expr: expr OR . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 124
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 99

   68 expr: expr AND . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 125
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 100

   58 expr: expr NE . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 126
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 101

   57 expr: expr EQ . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 127
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 102

   61 expr: expr '>' . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 128
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 103

   59 expr: expr '<' . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 129
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 104

   60 expr: expr SE . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 130
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 105

   62 expr: expr LE . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 131
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 106

   63 expr: expr '+' . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 132
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 107

   64 expr: expr '-' . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 133
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 108

   65 expr: expr '*' . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 134
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 109

   66 expr: expr '/' . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 135
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 110

   67 expr: expr '%' . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 136
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 111

   82 qualifiedname: expr '.' . IDENT
   85 qualnameorarray: expr '.' . IDENT
   86                | expr '.' . IDENT arrayindex

    IDENT  shift, and go to state 137


state 112

   53 expr: qualifiedname '(' . expr_list_e ')'
   54     | qualifiedname '(' . expr_list_e ')' arrayindex

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    $default  reduce using rule 89 (expr_list_e)

    expr             go to state 138
    qualifiedname    go to state 74
    qualnameorarray  go to state 75
    expr_list        go to state 139
    expr_list_e      go to state 140


state 113

   52 expr: qualnameorarray '=' . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 141
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 114

   13 function: accessmodif type IDENT '(' @1 args_e . ')' '{' statements '}'

    ')'  shift, and go to state 142


state 115

   42 arraytype: basictype '[' ',' ',' ']' .

    $default  reduce using rule 42 (arraytype)


state 116

   11 constructor: accessmodif IDENT '(' args_e ')' '{' statements . '}'
  101 statements: statements . statement

    IDENT      shift, and go to state 143
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    OBJECT     shift, and go to state 24
    IF         shift, and go to state 144
    WHILE      shift, and go to state 145
    FOR        shift, and go to state 146
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    RETURN     shift, and go to state 147
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72
    '{'        shift, and go to state 148
    '}'        shift, and go to state 149

    type             go to state 150
    noarraytype      go to state 27
    basictype        go to state 28
    arraytype        go to state 29
    expr             go to state 151
    qualifiedname    go to state 74
    qualnameorarray  go to state 75
    statement        go to state 152


state 117

   15 function: accessmodif VOID IDENT '(' @2 args_e ')' . '{' statements '}'

    '{'  shift, and go to state 153


state 118

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   78 arrayindex: '[' expr . ']'
   79           | '[' expr . ',' expr ']'
   80           | '[' expr . ',' expr ',' expr ']'
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    IS   shift, and go to state 97
    OR   shift, and go to state 98
    AND  shift, and go to state 99
    NE   shift, and go to state 100
    EQ   shift, and go to state 101
    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    SE   shift, and go to state 104
    LE   shift, and go to state 105
    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111
    ','  shift, and go to state 154
    ']'  shift, and go to state 155


state 119

   55 expr: NEW IDENT '(' . expr_list_e ')'

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    $default  reduce using rule 89 (expr_list_e)

    expr             go to state 138
    qualifiedname    go to state 74
    qualnameorarray  go to state 75
    expr_list        go to state 139
    expr_list_e      go to state 156


state 120

   56 expr: NEW IDENT arrayindex .

    $default  reduce using rule 56 (expr)


state 121

   71 expr: '(' basictype ')' . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 157
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 122

   50 expr: '(' expr ')' .

    $default  reduce using rule 50 (expr)


state 123

   70 expr: expr IS type .

    $default  reduce using rule 70 (expr)


state 124

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   69     | expr OR expr .
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    IS   shift, and go to state 97
    AND  shift, and go to state 99
    NE   shift, and go to state 100
    EQ   shift, and go to state 101
    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    SE   shift, and go to state 104
    LE   shift, and go to state 105
    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111

    $default  reduce using rule 69 (expr)


state 125

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   68     | expr AND expr .
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    IS   shift, and go to state 97
    NE   shift, and go to state 100
    EQ   shift, and go to state 101
    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    SE   shift, and go to state 104
    LE   shift, and go to state 105
    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111

    $default  reduce using rule 68 (expr)


state 126

   57 expr: expr . EQ expr
   58     | expr . NE expr
   58     | expr NE expr .
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    SE   shift, and go to state 104
    LE   shift, and go to state 105
    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111

    $default  reduce using rule 58 (expr)


state 127

   57 expr: expr . EQ expr
   57     | expr EQ expr .
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    SE   shift, and go to state 104
    LE   shift, and go to state 105
    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111

    $default  reduce using rule 57 (expr)


state 128

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   61     | expr '>' expr .
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111

    $default  reduce using rule 61 (expr)


state 129

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   59     | expr '<' expr .
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111

    $default  reduce using rule 59 (expr)


state 130

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   60     | expr SE expr .
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111

    $default  reduce using rule 60 (expr)


state 131

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   62     | expr LE expr .
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111

    $default  reduce using rule 62 (expr)


state 132

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   63     | expr '+' expr .
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111

    $default  reduce using rule 63 (expr)


state 133

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   64     | expr '-' expr .
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111

    $default  reduce using rule 64 (expr)


state 134

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   65     | expr '*' expr .
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    '.'  shift, and go to state 111

    $default  reduce using rule 65 (expr)


state 135

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   66     | expr '/' expr .
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    '.'  shift, and go to state 111

    $default  reduce using rule 66 (expr)


state 136

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   67     | expr '%' expr .
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    '.'  shift, and go to state 111

    $default  reduce using rule 67 (expr)


state 137

   82 qualifiedname: expr '.' IDENT .
   85 qualnameorarray: expr '.' IDENT .
   86                | expr '.' IDENT . arrayindex

    '['  shift, and go to state 87

    '('       reduce using rule 82 (qualifiedname)
    $default  reduce using rule 85 (qualnameorarray)

    arrayindex  go to state 158


state 138

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex
   87 expr_list: expr .

    IS   shift, and go to state 97
    OR   shift, and go to state 98
    AND  shift, and go to state 99
    NE   shift, and go to state 100
    EQ   shift, and go to state 101
    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    SE   shift, and go to state 104
    LE   shift, and go to state 105
    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111

    $default  reduce using rule 87 (expr_list)


state 139

   88 expr_list: expr_list . ',' expr
   90 expr_list_e: expr_list .

    ','  shift, and go to state 159

    $default  reduce using rule 90 (expr_list_e)


state 140

   53 expr: qualifiedname '(' expr_list_e . ')'
   54     | qualifiedname '(' expr_list_e . ')' arrayindex

    ')'  shift, and go to state 160


state 141

   52 expr: qualnameorarray '=' expr .
   57     | expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    IS   shift, and go to state 97
    OR   shift, and go to state 98
    AND  shift, and go to state 99
    NE   shift, and go to state 100
    EQ   shift, and go to state 101
    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    SE   shift, and go to state 104
    LE   shift, and go to state 105
    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111

    $default  reduce using rule 52 (expr)


state 142

   13 function: accessmodif type IDENT '(' @1 args_e ')' . '{' statements '}'

    '{'  shift, and go to state 161


state 143

   31 noarraytype: IDENT .
   37 arraytype: IDENT . '[' ']'
   38          | IDENT . '[' ',' ']'
   39          | IDENT . '[' ',' ',' ']'
   45 expr: IDENT . INCREMENT
   46     | IDENT . DECREMENT
   81 qualifiedname: IDENT .
   83 qualnameorarray: IDENT .
   84                | IDENT . arrayindex

    DECREMENT  shift, and go to state 85
    INCREMENT  shift, and go to state 86
    '['        shift, and go to state 162

    IDENT     reduce using rule 31 (noarraytype)
    '('       reduce using rule 81 (qualifiedname)
    $default  reduce using rule 83 (qualnameorarray)

    arrayindex  go to state 88


state 144

   91 statement: IF . '(' expr ')' statement
   92          | IF . '(' expr ')' statement ELSE statement

    '('  shift, and go to state 163


state 145

   93 statement: WHILE . '(' expr ')' statement

    '('  shift, and go to state 164


state 146

   94 statement: FOR . '(' variables_e ';' expr_e ';' expr_e ')' statement

    '('  shift, and go to state 165


state 147

   99 statement: RETURN . expr_e ';'

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    $default  reduce using rule 104 (expr_e)

    expr             go to state 166
    qualifiedname    go to state 74
    qualnameorarray  go to state 75
    expr_e           go to state 167


state 148

   98 statement: '{' . @3 statements '}'

    $default  reduce using rule 97 (@3)

    @3  go to state 168


state 149

   11 constructor: accessmodif IDENT '(' args_e ')' '{' statements '}' .

    $default  reduce using rule 11 (constructor)


state 150

   96 statement: type . variables ';'

    IDENT  shift, and go to state 77

    variables  go to state 169
    variable   go to state 36


state 151

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex
   95 statement: expr . ';'

    IS   shift, and go to state 97
    OR   shift, and go to state 98
    AND  shift, and go to state 99
    NE   shift, and go to state 100
    EQ   shift, and go to state 101
    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    SE   shift, and go to state 104
    LE   shift, and go to state 105
    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111
    ';'  shift, and go to state 170


state 152

  101 statements: statements statement .

    $default  reduce using rule 101 (statements)


state 153

   15 function: accessmodif VOID IDENT '(' @2 args_e ')' '{' . statements '}'

    $default  reduce using rule 100 (statements)

    statements  go to state 171


state 154

   79 arrayindex: '[' expr ',' . expr ']'
   80           | '[' expr ',' . expr ',' expr ']'

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 172
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 155

   78 arrayindex: '[' expr ']' .

    $default  reduce using rule 78 (arrayindex)


state 156

   55 expr: NEW IDENT '(' expr_list_e . ')'

    ')'  shift, and go to state 173


state 157

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   71     | '(' basictype ')' expr .
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    '.'  shift, and go to state 111

    $default  reduce using rule 71 (expr)


state 158

   86 qualnameorarray: expr '.' IDENT arrayindex .

    $default  reduce using rule 86 (qualnameorarray)


state 159

   88 expr_list: expr_list ',' . expr

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 174
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 160

   53 expr: qualifiedname '(' expr_list_e ')' .
   54     | qualifiedname '(' expr_list_e ')' . arrayindex

    '['  shift, and go to state 87

    $default  reduce using rule 53 (expr)

    arrayindex  go to state 175


state 161

   13 function: accessmodif type IDENT '(' @1 args_e ')' '{' . statements '}'

    $default  reduce using rule 100 (statements)

    statements  go to state 176


state 162

   37 arraytype: IDENT '[' . ']'
   38          | IDENT '[' . ',' ']'
   39          | IDENT '[' . ',' ',' ']'
   78 arrayindex: '[' . expr ']'
   79           | '[' . expr ',' expr ']'
   80           | '[' . expr ',' expr ',' expr ']'

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72
    ','        shift, and go to state 44
    ']'        shift, and go to state 45

    expr             go to state 118
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 163

   91 statement: IF '(' . expr ')' statement
   92          | IF '(' . expr ')' statement ELSE statement

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 177
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 164

   93 statement: WHILE '(' . expr ')' statement

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 178
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 165

   94 statement: FOR '(' . variables_e ';' expr_e ';' expr_e ')' statement

    IDENT    shift, and go to state 39
    BOOLEAN  shift, and go to state 21
    DOUBLE   shift, and go to state 22
    INT      shift, and go to state 23
    OBJECT   shift, and go to state 24

    $default  reduce using rule 102 (variables_e)

    type         go to state 179
    noarraytype  go to state 27
    basictype    go to state 28
    arraytype    go to state 29
    variables_e  go to state 180


state 166

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex
  105 expr_e: expr .

    IS   shift, and go to state 97
    OR   shift, and go to state 98
    AND  shift, and go to state 99
    NE   shift, and go to state 100
    EQ   shift, and go to state 101
    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    SE   shift, and go to state 104
    LE   shift, and go to state 105
    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111

    $default  reduce using rule 105 (expr_e)


state 167

   99 statement: RETURN expr_e . ';'

    ';'  shift, and go to state 181


state 168

   98 statement: '{' @3 . statements '}'

    $default  reduce using rule 100 (statements)

    statements  go to state 182


state 169

   22 variables: variables . ',' variable
   96 statement: type variables . ';'

    ';'  shift, and go to state 183
    ','  shift, and go to state 50


state 170

   95 statement: expr ';' .

    $default  reduce using rule 95 (statement)


state 171

   15 function: accessmodif VOID IDENT '(' @2 args_e ')' '{' statements . '}'
  101 statements: statements . statement

    IDENT      shift, and go to state 143
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    OBJECT     shift, and go to state 24
    IF         shift, and go to state 144
    WHILE      shift, and go to state 145
    FOR        shift, and go to state 146
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    RETURN     shift, and go to state 147
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72
    '{'        shift, and go to state 148
    '}'        shift, and go to state 184

    type             go to state 150
    noarraytype      go to state 27
    basictype        go to state 28
    arraytype        go to state 29
    expr             go to state 151
    qualifiedname    go to state 74
    qualnameorarray  go to state 75
    statement        go to state 152


state 172

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   79 arrayindex: '[' expr ',' expr . ']'
   80           | '[' expr ',' expr . ',' expr ']'
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    IS   shift, and go to state 97
    OR   shift, and go to state 98
    AND  shift, and go to state 99
    NE   shift, and go to state 100
    EQ   shift, and go to state 101
    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    SE   shift, and go to state 104
    LE   shift, and go to state 105
    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111
    ','  shift, and go to state 185
    ']'  shift, and go to state 186


state 173

   55 expr: NEW IDENT '(' expr_list_e ')' .

    $default  reduce using rule 55 (expr)


state 174

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex
   88 expr_list: expr_list ',' expr .

    IS   shift, and go to state 97
    OR   shift, and go to state 98
    AND  shift, and go to state 99
    NE   shift, and go to state 100
    EQ   shift, and go to state 101
    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    SE   shift, and go to state 104
    LE   shift, and go to state 105
    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111

    $default  reduce using rule 88 (expr_list)


state 175

   54 expr: qualifiedname '(' expr_list_e ')' arrayindex .

    $default  reduce using rule 54 (expr)


state 176

   13 function: accessmodif type IDENT '(' @1 args_e ')' '{' statements . '}'
  101 statements: statements . statement

    IDENT      shift, and go to state 143
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    OBJECT     shift, and go to state 24
    IF         shift, and go to state 144
    WHILE      shift, and go to state 145
    FOR        shift, and go to state 146
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    RETURN     shift, and go to state 147
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72
    '{'        shift, and go to state 148
    '}'        shift, and go to state 187

    type             go to state 150
    noarraytype      go to state 27
    basictype        go to state 28
    arraytype        go to state 29
    expr             go to state 151
    qualifiedname    go to state 74
    qualnameorarray  go to state 75
    statement        go to state 152


state 177

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex
   91 statement: IF '(' expr . ')' statement
   92          | IF '(' expr . ')' statement ELSE statement

    IS   shift, and go to state 97
    OR   shift, and go to state 98
    AND  shift, and go to state 99
    NE   shift, and go to state 100
    EQ   shift, and go to state 101
    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    SE   shift, and go to state 104
    LE   shift, and go to state 105
    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111
    ')'  shift, and go to state 188


state 178

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex
   93 statement: WHILE '(' expr . ')' statement

    IS   shift, and go to state 97
    OR   shift, and go to state 98
    AND  shift, and go to state 99
    NE   shift, and go to state 100
    EQ   shift, and go to state 101
    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    SE   shift, and go to state 104
    LE   shift, and go to state 105
    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111
    ')'  shift, and go to state 189


state 179

  103 variables_e: type . variables

    IDENT  shift, and go to state 77

    variables  go to state 190
    variable   go to state 36


state 180

   94 statement: FOR '(' variables_e . ';' expr_e ';' expr_e ')' statement

    ';'  shift, and go to state 191


state 181

   99 statement: RETURN expr_e ';' .

    $default  reduce using rule 99 (statement)


state 182

   98 statement: '{' @3 statements . '}'
  101 statements: statements . statement

    IDENT      shift, and go to state 143
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    OBJECT     shift, and go to state 24
    IF         shift, and go to state 144
    WHILE      shift, and go to state 145
    FOR        shift, and go to state 146
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    RETURN     shift, and go to state 147
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72
    '{'        shift, and go to state 148
    '}'        shift, and go to state 192

    type             go to state 150
    noarraytype      go to state 27
    basictype        go to state 28
    arraytype        go to state 29
    expr             go to state 151
    qualifiedname    go to state 74
    qualnameorarray  go to state 75
    statement        go to state 152


state 183

   96 statement: type variables ';' .

    $default  reduce using rule 96 (statement)


state 184

   15 function: accessmodif VOID IDENT '(' @2 args_e ')' '{' statements '}' .

    $default  reduce using rule 15 (function)


state 185

   80 arrayindex: '[' expr ',' expr ',' . expr ']'

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    expr             go to state 193
    qualifiedname    go to state 74
    qualnameorarray  go to state 75


state 186

   79 arrayindex: '[' expr ',' expr ']' .

    $default  reduce using rule 79 (arrayindex)


state 187

   13 function: accessmodif type IDENT '(' @1 args_e ')' '{' statements '}' .

    $default  reduce using rule 13 (function)


state 188

   91 statement: IF '(' expr ')' . statement
   92          | IF '(' expr ')' . statement ELSE statement

    IDENT      shift, and go to state 143
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    OBJECT     shift, and go to state 24
    IF         shift, and go to state 144
    WHILE      shift, and go to state 145
    FOR        shift, and go to state 146
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    RETURN     shift, and go to state 147
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72
    '{'        shift, and go to state 148

    type             go to state 150
    noarraytype      go to state 27
    basictype        go to state 28
    arraytype        go to state 29
    expr             go to state 151
    qualifiedname    go to state 74
    qualnameorarray  go to state 75
    statement        go to state 194


state 189

   93 statement: WHILE '(' expr ')' . statement

    IDENT      shift, and go to state 143
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    OBJECT     shift, and go to state 24
    IF         shift, and go to state 144
    WHILE      shift, and go to state 145
    FOR        shift, and go to state 146
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    RETURN     shift, and go to state 147
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72
    '{'        shift, and go to state 148

    type             go to state 150
    noarraytype      go to state 27
    basictype        go to state 28
    arraytype        go to state 29
    expr             go to state 151
    qualifiedname    go to state 74
    qualnameorarray  go to state 75
    statement        go to state 195


state 190

   22 variables: variables . ',' variable
  103 variables_e: type variables .

    ','  shift, and go to state 50

    $default  reduce using rule 103 (variables_e)


state 191

   94 statement: FOR '(' variables_e ';' . expr_e ';' expr_e ')' statement

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    $default  reduce using rule 104 (expr_e)

    expr             go to state 166
    qualifiedname    go to state 74
    qualnameorarray  go to state 75
    expr_e           go to state 196


state 192

   98 statement: '{' @3 statements '}' .

    $default  reduce using rule 98 (statement)


state 193

   57 expr: expr . EQ expr
   58     | expr . NE expr
   59     | expr . '<' expr
   60     | expr . SE expr
   61     | expr . '>' expr
   62     | expr . LE expr
   63     | expr . '+' expr
   64     | expr . '-' expr
   65     | expr . '*' expr
   66     | expr . '/' expr
   67     | expr . '%' expr
   68     | expr . AND expr
   69     | expr . OR expr
   70     | expr . IS type
   80 arrayindex: '[' expr ',' expr ',' expr . ']'
   82 qualifiedname: expr . '.' IDENT
   85 qualnameorarray: expr . '.' IDENT
   86                | expr . '.' IDENT arrayindex

    IS   shift, and go to state 97
    OR   shift, and go to state 98
    AND  shift, and go to state 99
    NE   shift, and go to state 100
    EQ   shift, and go to state 101
    '>'  shift, and go to state 102
    '<'  shift, and go to state 103
    SE   shift, and go to state 104
    LE   shift, and go to state 105
    '+'  shift, and go to state 106
    '-'  shift, and go to state 107
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    '%'  shift, and go to state 110
    '.'  shift, and go to state 111
    ']'  shift, and go to state 197


state 194

   91 statement: IF '(' expr ')' statement .
   92          | IF '(' expr ')' statement . ELSE statement

    ELSE  shift, and go to state 198

    $default  reduce using rule 91 (statement)


state 195

   93 statement: WHILE '(' expr ')' statement .

    $default  reduce using rule 93 (statement)


state 196

   94 statement: FOR '(' variables_e ';' expr_e . ';' expr_e ')' statement

    ';'  shift, and go to state 199


state 197

   80 arrayindex: '[' expr ',' expr ',' expr ']' .

    $default  reduce using rule 80 (arrayindex)


state 198

   92 statement: IF '(' expr ')' statement ELSE . statement

    IDENT      shift, and go to state 143
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    OBJECT     shift, and go to state 24
    IF         shift, and go to state 144
    WHILE      shift, and go to state 145
    FOR        shift, and go to state 146
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    RETURN     shift, and go to state 147
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72
    '{'        shift, and go to state 148

    type             go to state 150
    noarraytype      go to state 27
    basictype        go to state 28
    arraytype        go to state 29
    expr             go to state 151
    qualifiedname    go to state 74
    qualnameorarray  go to state 75
    statement        go to state 200


state 199

   94 statement: FOR '(' variables_e ';' expr_e ';' . expr_e ')' statement

    IDENT      shift, and go to state 59
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72

    $default  reduce using rule 104 (expr_e)

    expr             go to state 166
    qualifiedname    go to state 74
    qualnameorarray  go to state 75
    expr_e           go to state 201


state 200

   92 statement: IF '(' expr ')' statement ELSE statement .

    $default  reduce using rule 92 (statement)


state 201

   94 statement: FOR '(' variables_e ';' expr_e ';' expr_e . ')' statement

    ')'  shift, and go to state 202


state 202

   94 statement: FOR '(' variables_e ';' expr_e ';' expr_e ')' . statement

    IDENT      shift, and go to state 143
    INTEGER    shift, and go to state 60
    REAL       shift, and go to state 61
    BOOLEAN    shift, and go to state 21
    DOUBLE     shift, and go to state 22
    INT        shift, and go to state 23
    OBJECT     shift, and go to state 24
    IF         shift, and go to state 144
    WHILE      shift, and go to state 145
    FOR        shift, and go to state 146
    FALSE      shift, and go to state 62
    TRUE       shift, and go to state 63
    NEW        shift, and go to state 64
    THIS       shift, and go to state 65
    NUL        shift, and go to state 66
    RETURN     shift, and go to state 147
    '+'        shift, and go to state 67
    '-'        shift, and go to state 68
    '!'        shift, and go to state 69
    DECREMENT  shift, and go to state 70
    INCREMENT  shift, and go to state 71
    '('        shift, and go to state 72
    '{'        shift, and go to state 148

    type             go to state 150
    noarraytype      go to state 27
    basictype        go to state 28
    arraytype        go to state 29
    expr             go to state 151
    qualifiedname    go to state 74
    qualnameorarray  go to state 75
    statement        go to state 203


state 203

   94 statement: FOR '(' variables_e ';' expr_e ';' expr_e ')' statement .

    $default  reduce using rule 94 (statement)
